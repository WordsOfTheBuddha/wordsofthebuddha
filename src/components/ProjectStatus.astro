---
import { keyMap } from "../utils/transformId";
import { directoryStructureWithCounts } from "../data/directoryStructureWithCounts";

// Define status type for type safety
type StatusType = "review" | "complete";

// Define collection info - using our new counts from directoryStructureWithCounts
const collections = [
	{
		name: "dhp",
		count: directoryStructureWithCounts.dhp?.contentCount || 0,
		suffix: "verses",
		title: directoryStructureWithCounts.dhp?.title || "Dhammapada",
		total: 423,
		// Optional status for 100% collections: 'review' or 'complete'
		status: "complete" as StatusType,
	},
	{
		name: "iti",
		count: directoryStructureWithCounts.iti?.contentCount || 0,
		suffix: "sayings",
		title: directoryStructureWithCounts.iti?.title || "Itivuttaka",
		total: 112,
		// Example of a completed collection
		status: "complete" as StatusType,
	},
	{
		name: "mn",
		count: directoryStructureWithCounts.mn?.contentCount || 0,
		suffix: "discourses",
		title: directoryStructureWithCounts.mn?.title || "Majjhima Nikāya",
		total: 152,
	},
	{
		name: "snp",
		count: directoryStructureWithCounts.snp?.contentCount || 0,
		suffix: "teachings",
		title: directoryStructureWithCounts.snp?.title || "Sutta Nipāta",
		total: 71,
	},
	{
		name: "sn",
		count: directoryStructureWithCounts.sn?.contentCount || 0,
		suffix: "discourses",
		title: directoryStructureWithCounts.sn?.title || "Saṃyutta Nikāya",
		total: 2889,
	},
	{
		name: "an",
		count: directoryStructureWithCounts.an?.contentCount || 0,
		suffix: "discourses",
		title: directoryStructureWithCounts.an?.title || "Aṅguttara Nikāya",
		total: 9557,
	},
	{
		name: "ud",
		count: directoryStructureWithCounts.ud?.contentCount || 0,
		suffix: "utterances",
		title: directoryStructureWithCounts.ud?.title || "Udāna",
		total: 80,
	},
];

// Status display configurations with proper typing
const statusConfig: Record<
	StatusType,
	{
		color: string;
		label: string;
		shortLabel: string;
	}
> = {
	review: {
		color: "bg-indigo-600", // Deeper color representing almost complete
		label: "Proofreading",
		shortLabel: "",
	},
	complete: {
		color: "bg-emerald-600", // Deepest color for final completion
		label: "Complete",
		shortLabel: "✓",
	},
};
---

<table class="min-w-full border-collapse my-4">
	<thead class="bg-gray-100 dark:bg-gray-800">
		<tr>
			<th class="py-2 px-4 text-left border-b dark:border-gray-700"
				>Collection</th
			>
			<th
				class="py-2 px-4 text-left border-b dark:border-gray-700 hidden sm:table-cell"
				>Available</th
			>
			<th class="py-2 px-4 text-left border-b dark:border-gray-700"></th>
		</tr>
	</thead>
	<tbody>
		{
			collections.map(({ name, count, suffix, title, total, status }) => {
				const percentage = Math.round((count / total) * 100) || 0;
				const isComplete = percentage >= 100;

				// Determine color and label based on percentage or status
				let color, statusText;

				if (isComplete && status) {
					// Use manual status for 100% collections with status
					// Type assertion to ensure TypeScript knows status is a valid key
					const typedStatus = status as StatusType;
					color = statusConfig[typedStatus].color;
					statusText = statusConfig[typedStatus].label;
				} else {
					// Use percentage-based color with gradual progression
					color =
						percentage < 30
							? "bg-amber-500" // Early progress
							: percentage < 70
								? "bg-blue-500" // Medium progress
								: "bg-green-500"; // Significant progress
					statusText = null; // No status text for percentage-based items
				}

				return (
					<tr class="hover:bg-gray-50 dark:hover:bg-gray-700">
						<td class="py-2 px-4 border-b dark:border-gray-700 align-middle">
							<a href={name} class="flex items-center">
								<span class="font-medium">
									{keyMap[name] || name}
								</span>
								<span class="ml-2 text-xs text-gray-500 hidden sm:inline">
									({title.split(" - ")[0]})
								</span>
							</a>
						</td>
						<td class="py-2 px-4 border-b dark:border-gray-700 hidden sm:table-cell">
							<span class="font-medium">{count}</span> {suffix}
						</td>
						<td class="py-2 px-4 border-b dark:border-gray-700">
							<div class="text-xs text-gray-500 sm:hidden mt-1">
								{count} {suffix}
							</div>
							<div class="flex items-center">
								<div class="w-full bg-gray-200 dark:bg-gray-700 rounded-sm h-6 mr-1 sm:mr-2 relative">
									<div
										class={`h-full rounded-sm transition-all duration-500 flex items-center justify-center text-white text-xs ${color}`}
										style={`width: ${isComplete ? "100" : percentage}%`}
									>
										{/* Mobile: show in filled area only if >= 40% */}
										{percentage >= 40 && (
											<span class="font-medium sm:hidden">
												{percentage} %
											</span>
										)}
										{/* Tablet and up: show in filled area if >= 15% */}
										{percentage >= 15 && (
											<span class="font-medium hidden sm:inline">
												{percentage}%
											</span>
										)}
									</div>
									{/* Mobile: show in unfilled area if < 40% */}
									{percentage < 40 && (
										<div class="absolute inset-0 flex items-center justify-center text-gray-700 dark:text-gray-300 text-xs font-medium sm:hidden">
											{percentage} %
										</div>
									)}
								</div>
								<div class="whitespace-nowrap text-xs sm:text-sm">
									{isComplete && status && (
										<>
											<span class="font-medium hidden sm:inline">
												{statusText}
											</span>
											<span class="font-medium sm:hidden">
												{
													statusConfig[
														status as StatusType
													].shortLabel
												}
											</span>
										</>
									)}
								</div>
							</div>
						</td>
					</tr>
				);
			})
		}
	</tbody>
</table>

<style>
	@keyframes progress {
		0% {
			width: 0;
		}
	}

	.h-2.5 {
		height: 0.625rem;
	}

	/* Update height for the progress bar to fit text */
	.h-6 {
		height: 1.5rem;
	}
</style>
