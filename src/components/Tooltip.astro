<!-- this is a client-only script component -->
<script>
	// Helper function to parse Markdown-style links
	function parseMarkdownLinks(text: string) {
		return text.replace(
			/\[([^\]]+)\]\(([^)]+)\)/g,
			'<a href="$2" class="tooltip-link">$1</a>'
		);
	}

	// Helper to properly escape HTML for attribute values
	function escapeHtml(text: string) {
		return text
			.replace(/&/g, "&amp;")
			.replace(/</g, "&lt;")
			.replace(/>/g, "&gt;")
			.replace(/"/g, "&quot;")
			.replace(/'/g, "&#039;");
	}

	function replaceTooltips(element: HTMLElement) {
		for (let node of element.childNodes) {
			if (node.nodeType === Node.TEXT_NODE) {
				let text = node.textContent || "";
				// Replace |text::tooltip| pattern
				text = text.replace(
					/\|([^|:]+)::([^|]+)\|/g,
					(_, textPart, tooltip) => {
						// Parse any Markdown links in the tooltip content
						const parsedTooltip = parseMarkdownLinks(tooltip);
						// Properly escape HTML for attribute value
						const escapedTooltip = escapeHtml(parsedTooltip);
						return `<span class="tooltip-text" data-tippy-content="${escapedTooltip}">${textPart}</span>`;
					}
				);
				const span = document.createElement("span");
				span.innerHTML = text;
				if (node.parentNode) {
					node.parentNode.replaceChild(span, node);
				}
			} else if (
				node.nodeType === Node.ELEMENT_NODE &&
				node instanceof HTMLElement
			) {
				replaceTooltips(node);
			}
		}
	}

	document.addEventListener("DOMContentLoaded", () => {
		replaceTooltips(document.body);

		// Initialize tippy.js after replacements
		import("tippy.js").then((tippyModule) => {
			import("tippy.js/animations/scale-subtle.css");

			const { default: tippy } = tippyModule;

			// Define activeTooltip at a higher scope
			let activeTooltip: any = null;

			// Setup regular tooltips
			let tooltips = tippy("[data-tippy-content]", {
				maxWidth: 400,
				interactive: true,
				trigger: "click",
				hideOnClick: false,
				placement: "top",
				animation: "scale-subtle",
				theme: document.documentElement.classList.contains("dark")
					? "dark dictionary"
					: "dictionary",
				allowHTML: true,
				onCreate(instance) {
					// Parse the data-tippy-content attribute
					const content =
						instance.reference.getAttribute("data-tippy-content") ||
						"";

					// Format the content into the same style as dictionary tooltips
					instance.setContent(`
						<div class="tooltip-content">
							<div class="title">${instance.reference.textContent}</div>
							<div class="dpd-content">
                <div class="definition">${content}</div>
							</div>
						</div>
					`);

					// Add event delegation for links in tooltips
					instance.popper.addEventListener("click", (e) => {
						const link = (e.target as HTMLElement).closest(
							".tooltip-link, a"
						);
						if (link && link instanceof HTMLAnchorElement) {
							e.preventDefault();
							window.location.href =
								link.getAttribute("href") || "";
							// Close all tooltips after navigation
							tooltips.forEach((tooltip) => tooltip.hide());
						}
					});
				},
				onShow: (instance) => {
					// Hide all other tooltips when showing a new one
					tooltips.forEach((tooltip) => {
						if (tooltip !== instance) {
							tooltip.hide();
						}
					});
					if (activeTooltip) {
						activeTooltip.destroy();
						activeTooltip = null;
					}

					instance.popper.style.maxHeight = "250px";
					instance.popper.style.overflowY = "auto";
					instance.popper.style.overflowX = "hidden";
				},
			});

			// Setup Pali word lookup if enabled
			if (localStorage.getItem("paliLookup") === "true") {
				let activeTooltip: any = null;

				const showDictionary = async (
					text: string,
					x: number,
					y: number,
					isMobile = false
				) => {
					// Hide all regular tooltips when showing dictionary tooltip
					tooltips.forEach((tooltip) => tooltip.hide());

					if (activeTooltip) {
						activeTooltip.destroy();
						activeTooltip = null;
					}

					// Get selection coordinates
					const selection = window.getSelection();
					const range = selection?.getRangeAt(0);
					const rect = range?.getBoundingClientRect();

					console.log(
						"Selection rect:",
						rect
							? {
									top: rect.top,
									bottom: rect.bottom,
									left: rect.left,
									right: rect.right,
									height: rect.height,
									width: rect.width,
								}
							: "No rect available"
					);

					// Create temporary element for the tooltip
					const temp = document.createElement("div");
					temp.style.position = "absolute"; // Changed from fixed
					temp.style.zIndex = "9999";

					// Position anchor point based on device type
					if (rect) {
						const scrollX = window.scrollX;
						const scrollY = window.scrollY;
						const isTouchDevice = "ontouchstart" in window;

						temp.style.left = `${rect.left + scrollX + rect.width / 2}px`;
						// Use bottom position for touch devices, top for desktop
						temp.style.top = `${(isTouchDevice ? rect.bottom : rect.top) + scrollY}px`;

						console.log("Anchor position:", {
							left: rect.left + scrollX,
							top:
								(isTouchDevice ? rect.bottom : rect.top) +
								scrollY,
							withScroll: true,
							device: isTouchDevice ? "touch" : "desktop",
						});
					} else {
						temp.style.left = `${x}px`;
						temp.style.top = `${y}px`;
					}

					document.body.appendChild(temp);

					activeTooltip = tippy(temp, {
						content: `<div class="loading-spinner">
							<svg class="animate-spin h-5 w-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
								<circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
								<path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
							</svg>
							<span class="ml-2">Loading definition...</span>
						</div>`,
						allowHTML: true,
						interactive: true,
						theme: document.documentElement.classList.contains(
							"dark"
						)
							? "dark dictionary"
							: "dictionary",
						placement: "ontouchstart" in window ? "bottom" : "top", // Change placement based on device
						strategy: "fixed", // Use fixed positioning strategy
						popperOptions: {
							modifiers: [
								{
									name: "offset",
									options: {
										offset: [0, 10], // [skidding (horizontal), distance (vertical)]
									},
								},
								{
									name: "preventOverflow",
									options: {
										boundary: "viewport",
										altAxis: true, // Prevents overflow on both axes
										padding: 10, // Keeps 10px from viewport edges
									},
								},
								{
									name: "flip",
									enabled: false, // Disable flipping to top
								},
							],
						},
						showOnCreate: true,
						maxWidth: 400,
						trigger: "manual",
						hideOnClick: false,
						onShow(instance) {
							instance.popper.style.maxHeight = "300px";
							instance.popper.style.overflowY = "auto";
						},
					});

					try {
						const response = await fetch(
							`/api/pali/lookup?word=${encodeURIComponent(text)}`
						);
						const data = await response.json();
						if (data.definitions && data.definitions.length > 0) {
							const contentEl = document.createElement("div");
							contentEl.innerHTML = createTooltipContent(
								text,
								data
							);
							activeTooltip.setContent(contentEl);
						} else {
							activeTooltip.setContent("No definition found");
						}
					} catch (error) {
						console.error("Failed to fetch definition:", error);
						activeTooltip.setContent("Failed to load definition");
					}
				};

				// Desktop: Keep double-click handler
				if (!("ontouchstart" in window)) {
					document.addEventListener("dblclick", (e) => {
						const target = e.target as HTMLElement;
						if (!target.closest(".pali-paragraph")) return;

						const selection = window.getSelection();
						const text = selection?.toString().trim();
						if (!text || /\s/.test(text)) return;

						showDictionary(text, e.pageX, e.pageY, false);
					});
				}

				// Desktop: click outside to close
				if (!("ontouchstart" in window)) {
					document.addEventListener("click", (e) => {
						console.log(
							"Desktop click event for closing tooltip:",
							e.target
						);
						const target = e.target as HTMLElement;
						if (
							activeTooltip &&
							!target.closest(".tippy-content")
						) {
							console.log(
								"Closing dictionary tooltip on desktop."
							);
							activeTooltip.destroy();
							activeTooltip = null;
						}
					});
				}

				// Mobile: Use touch handler
				if ("ontouchstart" in window) {
					let startTouch: Touch | null = null;

					// Add close button to tooltip
					document.addEventListener("click", (e) => {
						const target = e.target as HTMLElement;
						if (
							activeTooltip &&
							!target.closest(".tippy-content") &&
							!target.closest(".pali-paragraph")
						) {
							activeTooltip.destroy();
							activeTooltip = null;
						}
					});

					// Prevent default context menu on mobile
					document.addEventListener("contextmenu", (e) => {
						const target = e.target as HTMLElement;
						if (target.closest(".pali-paragraph")) {
							e.preventDefault();
						}
					});

					document.addEventListener(
						"touchstart",
						(e) => {
							const target = e.target as HTMLElement;
							if (!target.closest(".pali-paragraph")) return;
							startTouch = e.touches[0];
						},
						{ passive: true }
					);

					document.addEventListener(
						"touchend",
						(e) => {
							if (!startTouch) return;

							const selection = window.getSelection();
							const text = selection?.toString().trim();

							console.log("Touch detected:", {
								text,
								hasPaliParent: !!(
									e.target as HTMLElement
								).closest(".pali-paragraph"),
							});

							if (text && !text.includes(" ")) {
								showDictionary(
									text,
									startTouch.pageX,
									startTouch.pageY,
									true
								);
							}
							startTouch = null;
						},
						{ passive: true }
					);

					// Add a document-wide click handler to close tooltip when clicking outside
					document.addEventListener("click", (e) => {
						const target = e.target as HTMLElement;
						if (
							activeTooltip &&
							!target.closest(".tippy-content")
						) {
							activeTooltip.hide();
						}
					});
				}
			}

			// Close tooltips when clicking outside
			document.addEventListener("click", (event) => {
				const target = event.target as HTMLElement;
				const clickedTooltip = target?.closest(".tooltip-text");
				const clickedTooltipContent = target?.closest(".tippy-content");
				const clickedTooltipBox = target?.closest(".tippy-box");

				if (
					!clickedTooltip &&
					!clickedTooltipContent &&
					!clickedTooltipBox
				) {
					tooltips.forEach((tooltip) => tooltip.hide());
				}
			});

			// Function to update tooltip themes
			function updateTooltipTheme() {
				tooltips.forEach((tooltip) => {
					if (document.documentElement.classList.contains("dark")) {
						tooltip.popper.classList.add("dark-tooltip");
					} else {
						tooltip.popper.classList.remove("dark-tooltip");
					}
				});
			}

			// Initial theme setup
			updateTooltipTheme();

			// Observe changes to the 'dark' class on the HTML element
			const observer = new MutationObserver((mutations) => {
				mutations.forEach((mutation) => {
					if (mutation.attributeName === "class") {
						updateTooltipTheme();
					}
				});
			});

			observer.observe(document.documentElement, { attributes: true });
		});
	});

	function createTooltipContent(word: string, data: any) {
		const { definitions } = data;
		return `
			<div class="tooltip-content">
                <div class="title">
                    <span>
                        ${definitions[0] ? definitions[0].lemma.replace(/ \d+$/, "") : word}
                    <span style="margin-left: 8px">
                    ${definitions[0].pos ? `<span class="grammar">${definitions[0].pos}</span>` : ""}
                    </span>
                    </span>
                    ${
						definitions[0].construction
							? `
                    <span>
                        <span class="construction">${definitions[0].construction.replace(/\n/g, " ; ")}</span>
                    </span>`
							: ""
					}
                </div>
				<div class="dpd-content">
					${definitions
						.map(
							(def: any, idx: number) => `
						<div class="summary${idx === definitions.length - 1 ? " last" : ""}">
							<div class="def-line">
								<span class="meaning">${idx + 1}. ${def.meaning}${def.meaning_lit ? ";" : ""}</span>
                                ${
									def.meaning_lit
										? `<span class="meaning" style="font-style: italic;">lit. ${def.meaning_lit}</span>`
										: ""
								}
							</div>
						</div>
					`
						)
						.join("")}
				</div>
			</div>
		`;
	}
</script>

<style is:global>
	.tippy-box[data-theme~="dictionary"] .summary:not(.last) {
		border-bottom: 1px solid var(--auth-input-border);
		margin-bottom: 0.5rem;
		padding-bottom: 0.5rem;
	}

	.tippy-box[data-theme~="dictionary"] .title {
		color: var(--primary-color);
		font-weight: 500;
		font-size: 0.9rem;
		border-bottom: 1px solid var(--auth-input-border);
		padding-bottom: 0.5rem;
		margin-bottom: 0.5rem;
	}

	.tooltip-content .title {
		display: flex;
		align-items: baseline;
		flex-direction: column;
		color: var(--primary-color);
		font-weight: 500;
		border-bottom: 1px solid var(--auth-input-border);
		margin-bottom: 0.5rem;
		padding-bottom: 0.5rem;
		font-size: 0.9rem;
	}

	:root[class~="dark"] .tooltip-content .title {
		color: var(--text-color);
	}

	.tooltip-content .grammar {
		color: var(--secondary-color);
		font-style: italic;
		margin-right: 0.5rem;
	}

	.tooltip-content .pattern {
		color: var(--text-muted);
		font-size: 0.8rem;
		margin-right: 0.5rem;
	}

	.tooltip-content .meaning {
		display: inline; /* Changed from block */
		margin: 0;
	}

	.tooltip-content .construction {
		font-size: 0.8rem;
		color: var(--text-muted);
		margin-top: 0.25rem;
	}

	.tooltip-content .construction .label {
		font-style: italic;
	}

	/* Add styles for links in tooltips */
	.tooltip-link,
	.tippy-content a {
		color: var(--link-color);
		text-decoration: underline;
		cursor: pointer;
	}
</style>
