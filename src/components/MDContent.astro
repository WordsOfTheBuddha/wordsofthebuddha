---
import { parseMarkdown } from "../utils/mdParser";

interface Props {
	content: string;
	// Optional split-mode content; when provided, split view can be shown via html.split
	splitEnglish?: string;
	splitPali?: string;
}

const { content, splitEnglish, splitPali } = Astro.props;
const parsedInterleaved = await parseMarkdown(content);
const parsedSplitEnglish = splitEnglish
	? await parseMarkdown(splitEnglish)
	: null;
const parsedSplitPali = splitPali ? await parseMarkdown(splitPali) : null;
---

{
	(
		<>
			<!-- Interleaved article (default) -->
			<article
				class="content-fade md-content prose prose-lg dark:prose-invert interleaved-article"
				aria-hidden="false"
				set:html={parsedInterleaved}
			/>

			<!-- Split wrapper (only visible when html has split + pali-on) -->
			{parsedSplitEnglish && parsedSplitPali && (
				<div class="content-fade split-wrapper" aria-hidden="true">
					<article
						id="panel1"
						class="split-panel md-content prose prose-lg dark:prose-invert"
						set:html={parsedSplitEnglish}
					/>
					<article
						id="panel2"
						class="split-panel md-content prose prose-lg dark:prose-invert"
						set:html={parsedSplitPali}
					/>
				</div>
			)}
		</>
	)
}

<style>
	.md-content :global(.pali-paragraph) {
		opacity: 0.8;
		margin-bottom: 0;
		color: var(--text-color);
		font-family: "Gentium Plus", serif;
	}
	/* Hide Pali paragraphs unless globally enabled */
	:global(html:not(.pali-on)) .md-content :global(.pali-paragraph) {
		display: none !important;
	}
	.md-content :global(.english-paragraph) {
		margin-top: 0.5rem;
	}
	.pali-content {
		margin-bottom: 2rem;
		opacity: 0.8;
		font-style: italic;
	}

	.pali-content + .english-content {
		padding-top: 1rem;
		border-top: 1px solid rgba(156, 163, 175, 0.2);
	}

	.split-wrapper {
		display: none; /* hidden by default */
		grid-template-columns: 1fr 1fr;
		gap: 1rem;
		min-height: 100%;
		position: relative;
		opacity: 0;
		transition: opacity 0.3s ease-in;
	}

	/* Show split only when explicitly enabled and pali is on */
	:global(html.split.pali-on) .split-wrapper {
		display: grid;
	}

	/* Hide interleaved when split + pali-on */
	:global(html.split.pali-on) .interleaved-article {
		display: none;
	}

	.split-wrapper.visible {
		opacity: 1;
	}

	.split-panel {
		padding: 0;
		width: 100%;
		min-width: 0;
		overflow-wrap: break-word;
		word-wrap: break-word;
	}

	.split-panel.prose {
		max-width: none;
	}

	/* Add styles for heading spacing in split mode */
	.split-wrapper h3,
	.split-wrapper h4 {
		margin-top: 2rem;
		padding-bottom: 1rem;
		position: relative;
	}

	/* Add base spacing for paragraphs in split mode */
	.split-wrapper [data-pair-id] {
		margin-bottom: var(--min-para-spacing, 1rem);
	}

	/* Ensure consistent base margins */
	.split-panel [data-pair-id] {
		margin-top: 8px; /* Match the English paragraph margin */
	}

	/* Common fade transition */
	.content-fade {
		opacity: 0;
		transition: opacity 0.3s ease-in;
	}

	.content-fade.visible {
		opacity: 1;
	}

	@media print {
		/* Ensure the visible container prints at full opacity and black text */
		.content-fade { opacity: 1 !important; }
		.interleaved-article, .split-wrapper { color: #000 !important; }
	}

	/* Responsive adjustments for split view */
	@media (min-width: 768px) {
		/* For medium and larger screens, set custom column widths */
		.split-wrapper {
			grid-template-columns: 52% 48%;
		}

		/* Give more space to English for medium and larger screens when verse content is present */
		.split-wrapper.has-verse {
			grid-template-columns: 55% 45%;
		}
	}

	@media (max-width: 767px) {
		.split-wrapper {
			grid-template-columns: 1fr; /* Stack vertically on mobile */
		}
	}
</style>

<script>
	function isSplitVisible() {
		const root = document.documentElement;
		if (!root.classList.contains("split") || !root.classList.contains("pali-on")) {
			return false;
		}
		const wrapper = document.querySelector(".split-wrapper");
		if (!wrapper) return false;
		const style = window.getComputedStyle(wrapper);
		return style.display !== "none" && style.visibility !== "hidden";
	}

	function showContent() {
		const contents = document.querySelectorAll(".content-fade");
		if (contents && contents.length) {
			requestAnimationFrame(() => {
				contents.forEach((el) => el.classList.add("visible"));
			});
		}
	}

	function updateA11yVisibility() {
		const interleaved = document.querySelector(
			".interleaved-article"
		) as HTMLElement | null;
		const split = document.querySelector(".split-wrapper") as
			| HTMLElement
			| null;
		const splitOn = isSplitVisible();
		if (interleaved) interleaved.setAttribute("aria-hidden", splitOn ? "true" : "false");
		if (split) split.setAttribute("aria-hidden", splitOn ? "false" : "true");
	}

	function waitForFontsReady(timeoutMs = 300) {
		return new Promise<void>((resolve) => {
			let done = false;
			const finish = () => {
				if (!done) {
					done = true;
					resolve();
				}
			};
			if ((document as any).fonts && (document as any).fonts.ready) {
				Promise.race([
					(document as any).fonts.ready,
					new Promise((r) => setTimeout(r, timeoutMs)),
				]).then(finish);
			} else {
				setTimeout(finish, 0);
			}
		});
	}

	async function adjustParagraphAlignment() {
		// Only attempt when split is active and visible
		if (!isSplitVisible()) {
			return;
		}

		await waitForFontsReady();
		await new Promise((r) => requestAnimationFrame(() => requestAnimationFrame(r)));
		const splitWrapper = document.querySelector(".split-wrapper");

		if (splitWrapper) {
			// Check if there are any verse elements in the English content
			const verseElements = document.querySelectorAll("#panel1 .verse");
			if (verseElements.length > 0) {
				splitWrapper.classList.add("has-verse");
			} else {
				splitWrapper.classList.remove("has-verse");
			}

			const leftPanel = document.querySelector("#panel1");
			const rightPanel = document.querySelector("#panel2");

			if (!leftPanel || !rightPanel) return;

			// Reset margins to base value
			document
				.querySelectorAll(
					"#panel1 [data-pair-id], #panel2 [data-pair-id]"
				)
				.forEach((el) => {
					(el as HTMLElement).style.marginTop = "8px";
				});

			// Get all paragraph pairs
			const engParas = document.querySelectorAll(
				"#panel1 [data-pair-id]"
			);
			const paraIds = Array.from(engParas).map((p) =>
				p.getAttribute("data-pair-id")
			);

			// First align the tops of each paragraph pair
			paraIds.forEach((id) => {
				const eng = document.querySelector(
					`#panel1 [data-pair-id="${id}"]`
				);
				const pali = document.querySelector(
					`#panel2 [data-pair-id="${id}"]`
				);

				if (eng && pali) {
					void (eng as HTMLElement).offsetHeight;
					void (pali as HTMLElement).offsetHeight;

					const engRect = eng.getBoundingClientRect();
					const paliRect = pali.getBoundingClientRect();

					const topDiff = engRect.top - paliRect.top;
					if (Math.abs(topDiff) > 1) {
						if (topDiff > 0) {
							(pali as HTMLElement).style.marginTop =
								`${8 + topDiff}px`;
						} else {
							(eng as HTMLElement).style.marginTop =
								`${8 - topDiff}px`;
						}
					}
				}
			});

			// Add consistent spacing between paragraph pairs
			const PARAGRAPH_SPACING = 24; // Constant spacing between paragraph blocks

			for (let i = 0; i < paraIds.length - 1; i++) {
				const currentId = paraIds[i];
				const nextId = paraIds[i + 1];

				const currentEng = document.querySelector(
					`#panel1 [data-pair-id="${currentId}"]`
				);
				const currentPali = document.querySelector(
					`#panel2 [data-pair-id="${currentId}"]`
				);
				const nextEng = document.querySelector(
					`#panel1 [data-pair-id="${nextId}"]`
				);
				const nextPali = document.querySelector(
					`#panel2 [data-pair-id="${nextId}"]`
				);

				if (currentEng && currentPali && nextEng && nextPali) {
					// Force reflow for accurate measurements
					void (currentEng as HTMLElement).offsetHeight;
					void (currentPali as HTMLElement).offsetHeight;

					const engRect = currentEng.getBoundingClientRect();
					const paliRect = currentPali.getBoundingClientRect();

					// Find the bottom of the tallest paragraph in current pair
					const maxBottom = Math.max(engRect.bottom, paliRect.bottom);

					// Set consistent spacing from tallest paragraph
					const nextEngRect = nextEng.getBoundingClientRect();
					const nextPaliRect = nextPali.getBoundingClientRect();

					// Calculate how much additional margin is needed
					const engMarginNeeded =
						maxBottom + PARAGRAPH_SPACING - nextEngRect.top;
					const paliMarginNeeded =
						maxBottom + PARAGRAPH_SPACING - nextPaliRect.top;

					if (engMarginNeeded > 0) {
						const currentMargin =
							parseInt(getComputedStyle(nextEng).marginTop) || 8;
						(nextEng as HTMLElement).style.marginTop =
							`${currentMargin + engMarginNeeded}px`;
					}

					if (paliMarginNeeded > 0) {
						const currentMargin =
							parseInt(getComputedStyle(nextPali).marginTop) || 8;
						(nextPali as HTMLElement).style.marginTop =
							`${currentMargin + paliMarginNeeded}px`;
					}
				}
			}
		}

		showContent();
	}

	// Run adjustment on load
	window.addEventListener("load", () => {
		setTimeout(() => {
			updateA11yVisibility();
			adjustParagraphAlignment();
			showContent();
		}, 10);
	});

	// Add resize listener to handle window size changes
	window.addEventListener("resize", () => {
		// Debounce resize events
		if (window.resizeTimer) clearTimeout(window.resizeTimer);
		window.resizeTimer = setTimeout(() => {
			adjustParagraphAlignment();
		}, 100);
	});

	window.addEventListener("beforeprint", () => {});

	window.addEventListener("afterprint", () => {
		restoreSplitLayout();
	});

	// When layout toggles, ensure visibility state is applied and alignment recalculated
	document.addEventListener("layoutChanged", () => {
		updateA11yVisibility();
		showContent();
		if (isSplitVisible()) {
			setTimeout(() => {
				adjustParagraphAlignment();
			}, 10);
		}
	});

	// Also respond to Pāli mode changes (when user toggles Pāli on/off)
	document.addEventListener("paliModeChanged", () => {
		updateA11yVisibility();
		showContent();
		if (isSplitVisible()) {
			setTimeout(() => {
				adjustParagraphAlignment();
			}, 10);
		}
	});

	// Add minimal print formatting function
	function applyPrintGridLayout() {
		// Target the print-formatted content area (same as PrintFormatter)
		const contentArea = document.querySelector(".print-formatted");
		if (!contentArea || !contentArea.classList.contains("split-wrapper")) {
			return;
		}

		(contentArea as HTMLElement).style.display = "block";

		const panel1 = contentArea.querySelector("#panel1");
		const panel2 = contentArea.querySelector("#panel2");

		if (!panel1 || !panel2) {
			return;
		}

		const paraIds = Array.from(
			panel1.querySelectorAll("[data-pair-id]")
		).map((p) => p.getAttribute("data-pair-id"));

		const fragment = document.createDocumentFragment();

		// Handle mixed content (paragraphs and headings)
		const allElements = Array.from(panel1.children);

		allElements.forEach((element) => {
			const pairId = element.getAttribute("data-pair-id");

			if (pairId) {
				// This is a paragraph pair
				const paliPara = panel2.querySelector(
					`[data-pair-id="${pairId}"]`
				);

				if (paliPara) {
					const pairGrid = document.createElement("div");
					pairGrid.className = "paragraph-pair-grid";
					pairGrid.appendChild(element.cloneNode(true));
					pairGrid.appendChild(paliPara.cloneNode(true));

					// Add these inline styles
					pairGrid.style.display = "grid";
					pairGrid.style.gridTemplateColumns = "52% 48%";
					pairGrid.style.gap = "1rem";
					pairGrid.style.alignItems = "start";
					pairGrid.style.marginBottom = "1.5rem";
					pairGrid.style.pageBreakInside = "avoid";

					// Reset margins on children
					pairGrid
						.querySelectorAll("[data-pair-id]")
						.forEach((child) => {
							(child as HTMLElement).style.margin = "0";
						});

					fragment.appendChild(pairGrid);
				}
			} else if (element.tagName && element.tagName.match(/^H[1-6]$/)) {
				// This is a heading - create single-column grid
				const headingRow = document.createElement("div");
				headingRow.className = "heading-row";
				headingRow.appendChild(element.cloneNode(true));

				// Add these inline styles
				headingRow.style.marginBottom = "1rem";
				headingRow.style.pageBreakAfter = "avoid";

				fragment.appendChild(headingRow);
			}
		});

		// Preserve footnotes (same logic as PrintFormatter)
		const footnotesSection = contentArea.querySelector("div:last-child");
		if (footnotesSection && footnotesSection.textContent?.includes("[1]")) {
			const footnotesClone = footnotesSection.cloneNode(
				true
			) as HTMLElement;
			footnotesClone.style.marginTop = "2rem";
			footnotesClone.style.paddingTop = "1rem";
			footnotesClone.style.borderTop = "1px solid #333";
			fragment.appendChild(footnotesClone);
		}

		// Store original for restoration and replace content
		window.originalSplitContent = contentArea.innerHTML;
		contentArea.innerHTML = "";
		contentArea.appendChild(fragment);
	}

	function restoreSplitLayout() {
		const splitWrapper = document.querySelector(".split-wrapper");
		if (!splitWrapper) return;

		// Check if we have the grid structure to restore from
		const pairGrids = document.querySelectorAll(".paragraph-pair-grid");
		if (pairGrids.length === 0) {
			return;
		}

		// Recreate the original panel structure
		const panel1 = document.createElement("article");
		panel1.id = "panel1";
		panel1.className =
			"split-panel md-content prose prose-lg dark:prose-invert";

		const panel2 = document.createElement("article");
		panel2.id = "panel2";
		panel2.className =
			"split-panel md-content prose prose-lg dark:prose-invert";

		// Extract paragraphs back to their original panels
		const footnotesSection =
			splitWrapper.querySelector(".footnotes-section");
		let footnotesClone = null;
		if (footnotesSection) {
			footnotesClone = footnotesSection.cloneNode(true);
		}

		pairGrids.forEach((grid) => {
			const children = grid.children;
			if (children.length >= 2) {
				// At least 2 children (could be more if footnotes were mixed in)
				const engPara = children[0].cloneNode(true);
				const paliPara = children[1].cloneNode(true);

				panel1.appendChild(engPara);
				panel2.appendChild(paliPara);
			}
		});

		// Replace content and restore original styles
		splitWrapper.innerHTML = "";
		splitWrapper.appendChild(panel1);
		splitWrapper.appendChild(panel2);

		// Add footnotes back if they existed
		if (footnotesClone) {
			splitWrapper.appendChild(footnotesClone);
		}

		(splitWrapper as HTMLElement).style.display = "";

		// Reapply normal screen alignment
		setTimeout(() => {
			adjustParagraphAlignment();
		}, 50);
	}

	// Listen for print formatting completion from PrintFormatter
	window.addEventListener("print-formatting-complete", () => {
		applyPrintGridLayout();
	});

	window.addEventListener("afterprint", restoreSplitLayout);
</script>

<script>
	declare global {
		interface Window {
			resizeTimer?: ReturnType<typeof setTimeout>;
			originalSplitContent?: string;
		}
	}
</script>
