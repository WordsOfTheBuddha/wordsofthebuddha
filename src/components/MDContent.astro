---
import { parseMarkdown } from "../utils/mdParser";

interface Props {
	content: string;
	sideContent?: string;
	layout?: "split" | "interleaved";
}

const { content, sideContent, layout = "interleaved" } = Astro.props;
const isSplit = layout === "split" && sideContent;

const parsedContent = await parseMarkdown(content);
const parsedSideContent = sideContent ? await parseMarkdown(sideContent) : null;
---

{
	isSplit ? (
		<div class="content-fade split-wrapper">
			<article
				id="panel1"
				class="split-panel md-content prose prose-lg dark:prose-invert"
				set:html={parsedContent}
			/>
			<article
				id="panel2"
				class="split-panel md-content prose prose-lg dark:prose-invert"
				set:html={parsedSideContent}
			/>
		</div>
	) : (
		<article
			class="content-fade md-content prose prose-lg dark:prose-invert"
			set:html={parsedContent}
		/>
	)
}

<style>
	.md-content :global(.pali-paragraph) {
		opacity: 0.8;
		margin-bottom: 0;
		color: var(--text-color);
	}
	.md-content :global(.english-paragraph) {
		margin-top: 0.5rem;
	}
	.pali-content {
		margin-bottom: 2rem;
		opacity: 0.8;
		font-style: italic;
	}

	.pali-content + .english-content {
		padding-top: 1rem;
		border-top: 1px solid rgba(156, 163, 175, 0.2);
	}

	.split-wrapper {
		display: grid;
		grid-template-columns: 1fr 1fr;
		gap: 1rem;
		min-height: 100%;
		position: relative;
		opacity: 0;
		transition: opacity 0.3s ease-in;
	}

	.split-wrapper.visible {
		opacity: 1;
	}

	.split-panel {
		padding: 0 1rem;
	}

	/* Add styles for heading spacing in split mode */
	.split-wrapper h3,
	.split-wrapper h4 {
		margin-top: 2rem;
		padding-bottom: 1rem;
		position: relative;
	}

	/* Add base spacing for paragraphs in split mode */
	.split-wrapper [data-pair-id] {
		margin-bottom: var(--min-para-spacing, 1rem);
	}

	/* Ensure consistent base margins */
	.split-panel [data-pair-id] {
		margin-top: 8px; /* Match the English paragraph margin */
	}

	/* Common fade transition */
	.content-fade {
		opacity: 0;
		transition: opacity 0.3s ease-in;
	}

	.content-fade.visible {
		opacity: 1;
	}

	/* Other existing styles remain unchanged */
</style>

<script>
	function showContent() {
		const content = document.querySelector(".content-fade");
		if (content) {
			requestAnimationFrame(() => {
				content.classList.add("visible");
			});
		}
	}

	function adjustParagraphAlignment() {
		const splitWrapper = document.querySelector(".split-wrapper");

		if (splitWrapper) {
			const leftPanel = document.querySelector("#panel1");
			const rightPanel = document.querySelector("#panel2");

			if (!leftPanel || !rightPanel) return;

			// Reset margins but keep the base margin
			document
				.querySelectorAll("#panel2 [data-pair-id]")
				.forEach((el) => {
					el.style.marginTop = "8px";
				});

			const engParas = document.querySelectorAll(
				"#panel1 [data-pair-id]"
			);

			engParas.forEach((eng, index) => {
				const id = eng.getAttribute("data-pair-id");
				const pali = document.querySelector(
					`#panel2 [data-pair-id="${id}"]`
				);

				if (pali) {
					void eng.offsetHeight;
					void pali.offsetHeight;

					const engRect = eng.getBoundingClientRect();
					const paliRect = pali.getBoundingClientRect();

					// Calculate raw position difference
					const diff = engRect.top - paliRect.top;

					if (Math.abs(diff) > 1) {
						const additionalMargin = Math.max(diff, 0);
						pali.style.marginTop = `${8 + additionalMargin}px`; // Base margin + adjustment
					}
				}
			});
		}

		showContent();
	}

	// First adjustment on load
	window.addEventListener("load", () => {
		// Adjustment after small delay of 10ms
		setTimeout(() => {
			adjustParagraphAlignment();
		}, 1);
	});
</script>
