---
import { parseMarkdown } from "../utils/mdParser";

interface Props {
	content: string;
	sideContent?: string;
	layout?: "split" | "interleaved";
}

const { content, sideContent, layout = "interleaved" } = Astro.props;
const isSplit = layout === "split" && sideContent;

const parsedContent = await parseMarkdown(content);
const parsedSideContent = sideContent ? await parseMarkdown(sideContent) : null;
---

{
	isSplit ? (
		<div class="split-wrapper">
			<article
				id="panel1"
				class="split-panel md-content prose prose-lg dark:prose-invert"
				set:html={parsedContent}
			/>
			<article
				id="panel2"
				class="split-panel md-content prose prose-lg dark:prose-invert"
				set:html={parsedSideContent}
			/>
		</div>
	) : (
		<article
			class="md-content prose prose-lg dark:prose-invert"
			set:html={parsedContent}
		/>
	)
}

<style>
	.md-content :global(.pali-paragraph) {
		margin-bottom: 0.1rem;
		opacity: 0.8;
		color: var(--text-color);
	}
	.md-content :global(.english-paragraph) {
		margin-top: 0.5rem;
	}
	.pali-content {
		margin-bottom: 2rem;
		opacity: 0.8;
		font-style: italic;
	}

	.pali-content + .english-content {
		padding-top: 1rem;
		border-top: 1px solid rgba(156, 163, 175, 0.2);
	}

	.split-wrapper {
		display: grid;
		grid-template-columns: 1fr 1fr;
		gap: 2rem;
		min-height: 100%;
		position: relative;
	}

	.split-panel {
		padding: 0 1rem;
	}

	/* Add styles for heading spacing in split mode */
	.split-wrapper h3,
	.split-wrapper h4 {
		margin-top: 2rem;
		padding-bottom: 1rem;
		position: relative;
	}

	/* Add base spacing for paragraphs in split mode */
	.split-wrapper [data-pair-id] {
		margin-bottom: var(--min-para-spacing, 1rem);
	}
</style>

<script>
	// Configuration
	const PARA_SPACING = 24;

	function adjustParagraphAlignment(iteration = 1) {
		const leftPanel = document.querySelector("#panel1");
		const rightPanel = document.querySelector("#panel2");

		if (!leftPanel || !rightPanel) {
			console.log("Error: Panels not found");
			return;
		}

		const engParas = document.querySelectorAll("#panel1 [data-pair-id]");

		engParas.forEach((eng) => {
			const id = eng.getAttribute("data-pair-id");
			const pali = document.querySelector(
				`#panel2 [data-pair-id="${id}"]`
			);

			if (pali) {
				// Reset margins to base spacing
				eng.style.margin = `${PARA_SPACING}px 0`;
				pali.style.margin = `${PARA_SPACING}px 0`;

				void eng.offsetHeight;
				void pali.offsetHeight;

				const engRect = eng.getBoundingClientRect();
				const paliRect = pali.getBoundingClientRect();
				const diff = engRect.top - paliRect.top;

				if (Math.abs(diff) > 1) {
					pali.style.marginTop = `${Math.max(diff, 0) + PARA_SPACING}px`;
					const newPaliRect = pali.getBoundingClientRect();
				}
			}
		});
	}

	// First adjustment on load
	window.addEventListener("load", () => {
		// Adjustment after small delay of 10ms
		setTimeout(() => {
			adjustParagraphAlignment(1);
		}, 10);
	});
</script>
