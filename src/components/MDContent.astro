---
import { parseMarkdown } from "../utils/mdParser";

interface Props {
	content: string;
	sideContent?: string;
	layout?: "split" | "interleaved";
}

const { content, sideContent, layout = "interleaved" } = Astro.props;
const isSplit = layout === "split" && sideContent;

const parsedContent = await parseMarkdown(content);
const parsedSideContent = sideContent ? await parseMarkdown(sideContent) : null;
---

{
	isSplit ? (
		<div class="content-fade split-wrapper">
			<article
				id="panel1"
				class="split-panel md-content prose prose-lg dark:prose-invert"
				set:html={parsedContent}
			/>
			<article
				id="panel2"
				class="split-panel md-content prose prose-lg dark:prose-invert"
				set:html={parsedSideContent}
			/>
		</div>
	) : (
		<article
			class="content-fade md-content prose prose-lg dark:prose-invert"
			set:html={parsedContent}
		/>
	)
}

<style>
	.md-content :global(.pali-paragraph) {
		opacity: 0.8;
		margin-bottom: 0;
		color: var(--text-color);
		font-family: "Gentium Plus", serif;
	}
	.md-content :global(.english-paragraph) {
		margin-top: 0.5rem;
	}
	.pali-content {
		margin-bottom: 2rem;
		opacity: 0.8;
		font-style: italic;
	}

	.pali-content + .english-content {
		padding-top: 1rem;
		border-top: 1px solid rgba(156, 163, 175, 0.2);
	}

	.split-wrapper {
		display: grid;
		grid-template-columns: 1fr 1fr;
		gap: 1rem;
		min-height: 100%;
		position: relative;
		opacity: 0;
		transition: opacity 0.3s ease-in;
	}

	.split-wrapper.visible {
		opacity: 1;
	}

	.split-panel {
		padding: 0;
		width: 100%;
		min-width: 0;
		overflow-wrap: break-word;
		word-wrap: break-word;
	}

	.split-panel.prose {
		max-width: none;
	}

	/* Add styles for heading spacing in split mode */
	.split-wrapper h3,
	.split-wrapper h4 {
		margin-top: 2rem;
		padding-bottom: 1rem;
		position: relative;
	}

	/* Add base spacing for paragraphs in split mode */
	.split-wrapper [data-pair-id] {
		margin-bottom: var(--min-para-spacing, 1rem);
	}

	/* Ensure consistent base margins */
	.split-panel [data-pair-id] {
		margin-top: 8px; /* Match the English paragraph margin */
	}

	/* Common fade transition */
	.content-fade {
		opacity: 0;
		transition: opacity 0.3s ease-in;
	}

	.content-fade.visible {
		opacity: 1;
	}

	/* Responsive adjustments for split view */
	@media (min-width: 768px) {
		.split-wrapper {
			grid-template-columns: 55% 45%; /* Give more space to English on medium and large screens */
		}
	}

	@media (max-width: 767px) {
		.split-wrapper {
			grid-template-columns: 1fr; /* Stack vertically on mobile */
		}
	}

	/* Other existing styles remain unchanged */
</style>

<script>
	function showContent() {
		const content = document.querySelector(".content-fade");
		if (content) {
			requestAnimationFrame(() => {
				content.classList.add("visible");
			});
		}
	}

	function adjustParagraphAlignment() {
		const splitWrapper = document.querySelector(".split-wrapper");

		if (splitWrapper) {
			const leftPanel = document.querySelector("#panel1");
			const rightPanel = document.querySelector("#panel2");

			if (!leftPanel || !rightPanel) return;

			// Reset margins to base value
			document
				.querySelectorAll(
					"#panel1 [data-pair-id], #panel2 [data-pair-id]"
				)
				.forEach((el) => {
					(el as HTMLElement).style.marginTop = "8px";
				});

			// Get all paragraph pairs
			const engParas = document.querySelectorAll(
				"#panel1 [data-pair-id]"
			);
			const paraIds = Array.from(engParas).map((p) =>
				p.getAttribute("data-pair-id")
			);

			// First align the tops of each paragraph pair
			paraIds.forEach((id) => {
				const eng = document.querySelector(
					`#panel1 [data-pair-id="${id}"]`
				);
				const pali = document.querySelector(
					`#panel2 [data-pair-id="${id}"]`
				);

				if (eng && pali) {
					void (eng as HTMLElement).offsetHeight;
					void (pali as HTMLElement).offsetHeight;

					const engRect = eng.getBoundingClientRect();
					const paliRect = pali.getBoundingClientRect();

					const topDiff = engRect.top - paliRect.top;
					if (Math.abs(topDiff) > 1) {
						if (topDiff > 0) {
							(pali as HTMLElement).style.marginTop =
								`${8 + topDiff}px`;
						} else {
							(eng as HTMLElement).style.marginTop =
								`${8 - topDiff}px`;
						}
					}
				}
			});

			// Add consistent spacing between paragraph pairs
			const PARAGRAPH_SPACING = 24; // Constant spacing between paragraph blocks

			for (let i = 0; i < paraIds.length - 1; i++) {
				const currentId = paraIds[i];
				const nextId = paraIds[i + 1];

				const currentEng = document.querySelector(
					`#panel1 [data-pair-id="${currentId}"]`
				);
				const currentPali = document.querySelector(
					`#panel2 [data-pair-id="${currentId}"]`
				);
				const nextEng = document.querySelector(
					`#panel1 [data-pair-id="${nextId}"]`
				);
				const nextPali = document.querySelector(
					`#panel2 [data-pair-id="${nextId}"]`
				);

				if (currentEng && currentPali && nextEng && nextPali) {
					// Force reflow for accurate measurements
					void (currentEng as HTMLElement).offsetHeight;
					void (currentPali as HTMLElement).offsetHeight;

					const engRect = currentEng.getBoundingClientRect();
					const paliRect = currentPali.getBoundingClientRect();

					// Find the bottom of the tallest paragraph in current pair
					const maxBottom = Math.max(engRect.bottom, paliRect.bottom);

					// Set consistent spacing from tallest paragraph
					const nextEngRect = nextEng.getBoundingClientRect();
					const nextPaliRect = nextPali.getBoundingClientRect();

					// Calculate how much additional margin is needed
					const engMarginNeeded =
						maxBottom + PARAGRAPH_SPACING - nextEngRect.top;
					const paliMarginNeeded =
						maxBottom + PARAGRAPH_SPACING - nextPaliRect.top;

					if (engMarginNeeded > 0) {
						const currentMargin =
							parseInt(getComputedStyle(nextEng).marginTop) || 8;
						(nextEng as HTMLElement).style.marginTop =
							`${currentMargin + engMarginNeeded}px`;
					}

					if (paliMarginNeeded > 0) {
						const currentMargin =
							parseInt(getComputedStyle(nextPali).marginTop) || 8;
						(nextPali as HTMLElement).style.marginTop =
							`${currentMargin + paliMarginNeeded}px`;
					}
				}
			}
		}

		showContent();
	}

	// Run adjustment on load
	window.addEventListener("load", () => {
		setTimeout(() => {
			adjustParagraphAlignment();
		}, 10);
	});

	// Add resize listener to handle window size changes
	window.addEventListener("resize", () => {
		// Debounce resize events
		if (window.resizeTimer) clearTimeout(window.resizeTimer);
		window.resizeTimer = setTimeout(() => {
			adjustParagraphAlignment();
		}, 100);
	});
</script>

<script>
	declare global {
		interface Window {
			resizeTimer?: ReturnType<typeof setTimeout>;
		}
	}
</script>
