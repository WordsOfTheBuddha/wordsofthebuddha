---
import { app } from "../firebase/server";
import { getAuth } from "firebase-admin/auth";
import ThemeToggle from "./ThemeToggle.astro";

interface Props {
	showAuth?: boolean;
}

const { showAuth = false } = Astro.props;
const currentPath = Astro.url.pathname;
const isInReviewSection =
	currentPath === "/review-room" || currentPath === "/profile";

// Only check auth if showAuth is true
let user = null;
if (showAuth) {
	const auth = getAuth(app);
	if (Astro.cookies.has("__session")) {
		const sessionCookie = Astro.cookies.get("__session")?.value;
		if (sessionCookie) {
			const decodedCookie = await auth.verifySessionCookie(sessionCookie);
			if (decodedCookie) {
				user = await auth.getUser(decodedCookie.uid);
			}
		}
	}
}
---

<nav
	class="flex items-center justify-between border-b border-[var(--border-color)]
         bg-white dark:bg-gray-900 px-4 py-3 text-gray-900 dark:text-gray-100 min-h-[4rem]"
>
	<div class="text-xl font-bold">
		<a href="/" class="hover:underline"> Words of the Buddha </a>
	</div>
	<div class="flex items-center gap-2 min-h-[2.25rem] z-50">
		{
			showAuth &&
				(user ? (
					<div class="relative">
						<button
							type="button"
							id="user-menu-button"
							class="flex items-center gap-2 px-1 py-1 text-sm font-medium text-[var(--text-color)] hover:text-[var(--link-hover-color)] focus:outline-none"
						>
							<span>{user.displayName}</span>
							<svg class="w-4 h-4" viewBox="0 0 20 20" fill="currentColor">
								<path
									fill-rule="evenodd"
									d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
									clip-rule="evenodd"
								/>
							</svg>
						</button>
						<div
							id="user-menu"
							class="hidden absolute right-0 mt-2 w-48 rounded-md shadow-lg bg-[var(--auth-card-bg)] ring-1 ring-black ring-opacity-5"
						>
							<div class="py-1">
								{isInReviewSection && (
									<a
										href="/"
										class="block px-4 py-2 text-sm text-[var(--text-color)] hover:bg-[var(--auth-input-bg)]"
									>
										Reading Room
									</a>
								)}
								<a
									href="/review-room"
									class="block px-4 py-2 text-sm text-[var(--text-color)] hover:bg-[var(--auth-input-bg)]"
								>
									Review Room
								</a>
								<a
									href="/profile"
									class="block px-4 py-2 text-sm text-[var(--text-color)] hover:bg-[var(--auth-input-bg)]"
								>
									Profile
								</a>
								<form action="/api/auth/signout" method="post">
									<input type="hidden" name="returnTo" value={currentPath} />
									<button
										type="submit"
										class="block w-full text-left px-4 py-2 text-sm text-[var(--text-color)] hover:bg-[var(--auth-input-bg)]"
									>
										Sign out
									</button>
								</form>
							</div>
						</div>
					</div>
				) : (
					<a
						href={`/signin?returnTo=${encodeURIComponent(currentPath)}`}
						class="px-3 my-1 py-1 text-sm border rounded-md font-medium text-[var(--auth-button-bg)] border-[var(--auth-button-bg)] hover:bg-[var(--auth-button-bg)] hover:text-white focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-[var(--primary-color)]"
					>
						Sign in
					</a>
				))
		}
	</div>
</nav>

<script>
	const userMenuButton = document.getElementById("user-menu-button");
	const userMenu = document.getElementById("user-menu");
	let isMenuOpen = false;

	if (userMenuButton && userMenu) {
		// Toggle menu on button click
		userMenuButton.addEventListener("click", (e) => {
			e.stopPropagation();
			isMenuOpen = !isMenuOpen;
			userMenu.classList.toggle("hidden");
		});

		// Close menu when clicking outside
		document.addEventListener("click", (e) => {
			if (isMenuOpen && !userMenu.contains(e.target as Node)) {
				isMenuOpen = false;
				userMenu.classList.add("hidden");
			}
		});
	}
</script>
