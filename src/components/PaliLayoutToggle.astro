---
import ArrowsUpDown from "../assets/unified-view.svg?raw";
import ArrowsRightLeft from "../assets/split-view.svg?raw";

const { class: className } = Astro.props;
// Render always; visibility is controlled client-side by the 'pali-on' class
---

<button
	id="paliLayoutToggle"
	class:list={[
		"hidden md:inline-flex items-center gap-1 p-2 text-sm rounded-full transition-all duration-300 hover:bg-gray-100 dark:hover:bg-gray-800",
		className,
	]}
	style="color: var(--layout-active-color)"
	title="Switch to interleaved view"
>
	<span class="interleaved-icon hidden w-4 h-4" set:html={ArrowsUpDown} />
	<span class="split-icon hidden w-4 h-4" set:html={ArrowsRightLeft} />
</button>

<script>
	import { setLayoutState } from "../utils/theme";

	function initializeLayout() {
		if (window.innerWidth < 768) {
			return;
		}
		const urlParams = new URLSearchParams(window.location.search);
		const layoutParam = urlParams.get("layout");
		const storedLayout = localStorage.getItem("layout");

		// URL param takes precedence over localStorage
		const currentLayout = layoutParam || storedLayout || "interleaved";

		// Set initial state
		document.documentElement.classList.toggle(
			"split",
			currentLayout === "split"
		);

		// Do not call setLayoutState here to avoid redundant writes; we only reflect existing state.
	}

	const toggle = document.getElementById("paliLayoutToggle");
	if (toggle) {
		// Control visibility: show only when Pali is enabled
		const applyVisibility = () => {
			const enabled =
				document.documentElement.classList.contains("pali-on");
			toggle.classList.toggle("hidden", !enabled);
		};
		applyVisibility();
		document.addEventListener("paliModeChanged", applyVisibility as any);

		const updateToggleState = (isSplit: boolean) => {
			const splitIcon = toggle.querySelector(".split-icon");
			const interleavedIcon = toggle.querySelector(".interleaved-icon");

			if (splitIcon && interleavedIcon) {
				splitIcon.classList.toggle("hidden", !isSplit);
				interleavedIcon.classList.toggle("hidden", isSplit);
			}
			toggle.title = isSplit
				? "Switch to vertical interleaved view"
				: "Switch to side split view";
		};

		// Initialize on page load
		if (window.innerWidth >= 768) {
			initializeLayout();
			updateToggleState(
				document.documentElement.classList.contains("split")
			);

			toggle.addEventListener("click", () => {
				const isSplit =
					document.documentElement.classList.contains("split");
				const newLayout = isSplit ? "interleaved" : "split";
				document.documentElement.classList.toggle("split");
				setLayoutState(newLayout);
				updateToggleState(!isSplit);
				// Dispatch event for components that need layout updates
				document.dispatchEvent(new CustomEvent("layoutChanged"));
			});
		}
	}
</script>

<style>
	/* Hide the layout toggle when Pāli is off, even before JS runs */
	:global(html:not(.pali-on)) #paliLayoutToggle {
		display: none !important;
	}
	/* Ensure it appears inline on md+ screens when Pāli is enabled */
	:global(html.pali-on) #paliLayoutToggle {
		display: inline-flex;
	}
</style>
