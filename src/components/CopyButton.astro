<!-- src/components/CopyButton.astro -->
<button
	id="highlight-copy"
	class="copy-btn"
	data-tooltip="Rich content copy"
	aria-label="Copy text"
>
	<svg
		xmlns="http://www.w3.org/2000/svg"
		width="16"
		height="16"
		viewBox="0 0 24 24"
		fill="none"
		stroke="currentColor"
	>
		<rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect>
		<path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"
		></path>
	</svg>
</button>

<script>
	/**
	 * Enhanced Copy Button with Annotation-Based Tooltips
	 *
	 * Features:
	 * - Inline tooltips: Short tooltips (≤ threshold) shown as: <b>term</b> (definition)
	 * - Footnoted tooltips: Long tooltips (> threshold) shown as: <b>term</b> [1] with footnotes below
	 * - Configurable threshold via localStorage (default: 20 characters)
	 *
	 * Console functions:
	 * - setTooltipThreshold(number): Change the threshold
	 * - getTooltipThreshold(): Get current threshold
	 */
	function getFormattedContainer(range: Range) {
		const container = document.createElement("div");
		container.appendChild(range.cloneContents());

		const tooltips = Array.from(
			container.querySelectorAll(".tooltip-text")
		);
		const threshold = parseInt(
			localStorage.getItem("tooltipThreshold") || "35"
		);

		const inlineTooltips: Array<{ element: Element; content: string }> = [];
		const footnotedTooltips: Array<{
			element: Element;
			content: string;
			text: string;
			refNum: number;
		}> = [];

		// Categorize tooltips by content length
		tooltips.forEach((tooltip) => {
			const text = tooltip.textContent || "";
			const tooltipContent =
				tooltip.getAttribute("data-tooltip-content") || "";

			if (tooltipContent.length <= threshold) {
				inlineTooltips.push({
					element: tooltip,
					content: tooltipContent,
				});
			} else {
				footnotedTooltips.push({
					element: tooltip,
					content: tooltipContent,
					text: text,
					refNum: footnotedTooltips.length + 1,
				});
			}
		});

		// Process inline tooltips (existing logic)
		inlineTooltips.forEach(({ element, content }) => {
			const text = element.textContent || "";
			const formatted = `<b>${text}</b> (${content})`;
			const span = document.createElement("span");
			span.innerHTML = formatted;
			if (element.parentNode) {
				element.parentNode.replaceChild(span, element);
			}
		});

		// Process footnoted tooltips with numbered references
		footnotedTooltips.forEach(({ element, text, refNum }) => {
			const formatted = `<b>${text}</b> [${refNum}]`;
			const span = document.createElement("span");
			span.innerHTML = formatted;
			if (element.parentNode) {
				element.parentNode.replaceChild(span, element);
			}
		});

		// Add footnotes section if there are any footnoted tooltips
		if (footnotedTooltips.length > 0) {
			const footnotes = footnotedTooltips
				.map(({ text, content, refNum }) => {
					// Extract Pali term from content if it exists (pattern: [paliTerm])
					const paliMatch = content.match(/\[([^\]]+)\]$/);
					const paliTerm = paliMatch ? paliMatch[1] : null;
					const cleanContent = paliTerm
						? content.replace(/\s*\[([^\]]+)\]$/, "")
						: content;

					// Format footnote with ≈ symbol
					if (paliTerm) {
						return `[${refNum}] ${text} [${paliTerm}] ≈ ${cleanContent}`;
					} else {
						return `[${refNum}] ${text} ≈ ${cleanContent}`;
					}
				})
				.join("\n\n");

			const footnotesDiv = document.createElement("div");
			footnotesDiv.innerHTML = `<br><br>${footnotes}`;
			container.appendChild(footnotesDiv);
		}

		return container;
	}

	// NEW: Recursive function to process nodes.
	function processNode(node: Node): string {
		if (node.nodeType === Node.TEXT_NODE) {
			return node.textContent || "";
		}
		if (node.nodeType === Node.ELEMENT_NODE) {
			const el = node as HTMLElement;
			const tag = el.tagName.toLowerCase();
			if (tag === "br") return "\n";
			let result = "";
			el.childNodes.forEach((child) => {
				result += processNode(child);
			});
			if (["p", "h1", "h2", "h3", "h4", "h5", "h6"].includes(tag)) {
				result = result.trim() + "\n\n";
			}
			return result;
		}
		return "";
	}

	// NEW: Updated plain text generator using processNode.
	function getPlainTextFromContainer(container: HTMLElement): string {
		let text = "";
		container.childNodes.forEach((node) => {
			text += processNode(node);
		});
		return text.replace(/\n{3,}/g, "\n\n").trim();
	}

	function copyHighlightedText() {
		const selection = window.getSelection();
		if (!selection?.rangeCount) return;
		const range = selection.getRangeAt(0);
		const container = getFormattedContainer(range);
		// Wrap the HTML in a div with white-space: pre-wrap so line breaks are preserved.
		const richText = `<div style="white-space: pre-wrap;">${container.innerHTML}</div>`;

		// NEW: Use helper function to generate plain text with extra newlines after paragraphs.
		let plainText = getPlainTextFromContainer(container);

		const clipboardItem = new ClipboardItem({
			"text/html": new Blob([richText], { type: "text/html" }),
			"text/plain": new Blob([plainText], { type: "text/plain" }),
		});

		navigator.clipboard
			.write([clipboardItem])
			.then(() => {
				const copyBtn = document.getElementById("highlight-copy");
				if (copyBtn) {
					copyBtn.classList.add("copied");
					setTimeout(() => copyBtn.classList.remove("copied"), 2000);
				}
			})
			.catch((err) => console.error("Copy failed:", err));
	}

	// Utility functions for threshold configuration
	function getTooltipThreshold(): number {
		return parseInt(localStorage.getItem("tooltipThreshold") || "20");
	}

	function setTooltipThreshold(threshold: number): void {
		localStorage.setItem("tooltipThreshold", threshold.toString());
		updateButtonTooltip();
	}

	function updateButtonTooltip(): void {
		const copyBtn = document.getElementById("highlight-copy");
		if (copyBtn) {
			const threshold = getTooltipThreshold();
			copyBtn.setAttribute("data-tooltip", `Rich content copy`);
		}
	}

	document
		.getElementById("highlight-copy")
		?.addEventListener("click", copyHighlightedText);

	// Initialize button tooltip and expose configuration functions
	document.addEventListener("DOMContentLoaded", () => {
		updateButtonTooltip();

		// Expose configuration functions globally for console access
		(window as any).setTooltipThreshold = setTooltipThreshold;
		(window as any).getTooltipThreshold = getTooltipThreshold;
	});

	updateButtonTooltip(); // Initialize tooltip on load
</script>

<style>
	.copy-btn {
		width: 24px;
		height: 24px;
		border: none;
		border-radius: 50%;
		background: #777;
		color: white;
		cursor: pointer;
		display: inline-flex;
		align-items: center;
		justify-content: center;
		padding: 0;
		flex-shrink: 0;
		transition: background-color 0.2s;
		position: relative;
	}
	.copy-btn:hover {
		background: #666;
	}
	.copy-btn.copied {
		background: var(--primary-color, #4caf50);
	}

	/* Tooltip styles */
	[data-tooltip] {
		position: relative;
	}

	[data-tooltip]::before,
	[data-tooltip]::after {
		position: absolute;
		opacity: 0;
		visibility: hidden;
		transition: opacity 0.3s ease;
		pointer-events: none;
	}

	/* Tooltip box */
	[data-tooltip]::before {
		content: attr(data-tooltip);
		bottom: calc(100% + 5px);
		left: 50%;
		transform: translateX(-50%);
		padding: 4px 8px;
		border-radius: 4px;
		background: var(--bg-color, #fff);
		color: var(--text-color, #000);
		font-size: 12px;
		white-space: nowrap;
		box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
	}

	/* Show on hover */
	[data-tooltip]:hover::before,
	[data-tooltip]:hover::after {
		opacity: 1;
		visibility: visible;
	}
</style>
