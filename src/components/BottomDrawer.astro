---
export const prerender = false;
import "../styles/bottomDrawer.css";
---

<!-- this is a client-only script component -->
<script>
	import { lookupSingleWord } from "../utils/paliLookup";
	// Helper function to parse Markdown-style links
	function parseMarkdownLinks(text: string) {
		return text.replace(
			/\[([^\]]+)\]\(([^)]+)\)/g,
			'<a href="$2" class="tooltip-link">$1</a>'
		);
	}

	// Helper to properly escape HTML for attribute values
	function escapeHtml(text: string) {
		return text
			.replace(/&/g, "&amp;")
			.replace(/</g, "&lt;")
			.replace(/>/g, "&gt;")
			.replace(/"/g, "&quot;")
			.replace(/'/g, "&#039;");
	}

	// Bottom popover manager
	class BottomPopover {
		private popover: HTMLElement | null = null;
		private isVisible: boolean = false;

		constructor() {
			this.createPopover();
		}

		private createPopover() {
			this.popover = document.createElement("div");
			this.popover.className = "bottom-popover";
			this.popover.innerHTML = `
				<div class="popover-content">
					<button class="close-btn" aria-label="Close">
						<svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
							<path d="M3.72 3.72a.75.75 0 0 1 1.06 0L8 6.94l3.22-3.22a.75.75 0 1 1 1.06 1.06L9.06 8l3.22 3.22a.75.75 0 1 1-1.06 1.06L8 9.06l-3.22 3.22a.75.75 0 0 1-1.06-1.06L6.94 8 3.72 4.78a.75.75 0 0 1 0-1.06z"/>
						</svg>
					</button>
					<div class="popover-body"></div>
				</div>
			`;

			// Add close button event
			const closeBtn = this.popover.querySelector(".close-btn");
			closeBtn?.addEventListener("click", () => this.hide());

			document.body.appendChild(this.popover);
		}

		show(
			content: string,
			contentType: "markdown" | "dictionary",
			primaryText?: string
		) {
			if (!this.popover) return;

			const contentEl = this.popover.querySelector(".popover-body");
			if (!contentEl) return;

			if (contentType === "markdown") {
				// For |text::tooltip| content - show primary word/phrase
				// Extract bracketed text (Pali term) from content
				const bracketMatch = content.match(/\[([^\]]+)\]$/);
				const paliTerm = bracketMatch ? bracketMatch[1] : null;
				const cleanContent = paliTerm
					? content.replace(/\s*\[([^\]]+)\]$/, "")
					: content;

				contentEl.innerHTML = `
					<div class="tooltip-content markdown-content">
						${
							primaryText
								? `
							<div class="title">
								<span class="title-text">${primaryText}</span>
								${paliTerm ? `<span class="pali-term">[${paliTerm}]</span>` : ""}
							</div>
						`
								: ""
						}
						<div class="definition">${cleanContent}</div>
					</div>
				`;

				// Remove any existing navigation controls for markdown content
				this.removeNavigationControls();
			} else {
				// For Pali dictionary content
				contentEl.innerHTML = content;
			}

			this.popover.classList.add("visible");
			this.isVisible = true;

			// Handle link clicks within popover
			this.setupLinkHandlers();
		}

		hide() {
			if (!this.popover) return;
			this.popover.classList.remove("visible");
			this.isVisible = false;
		}

		private setupLinkHandlers() {
			const links = this.popover?.querySelectorAll(".tooltip-link, a");
			links?.forEach((link) => {
				link.addEventListener("click", (e) => {
					if (link instanceof HTMLAnchorElement) {
						e.preventDefault();
						window.location.href = link.getAttribute("href") || "";
						this.hide();
					}
				});
			});
		}

		isOpen() {
			return this.isVisible;
		}

		// Helper methods for navigation
		getPopoverElement() {
			return this.popover;
		}

		addNavigationControls(html: string) {
			const popoverContent =
				this.popover?.querySelector(".popover-content");
			if (popoverContent) {
				// Remove existing navigation controls
				const existingNav = popoverContent.querySelector(
					".navigation-controls"
				);
				if (existingNav) existingNav.remove();

				// Add new navigation controls
				popoverContent.insertAdjacentHTML("beforeend", html);
			}
		}

		removeNavigationControls() {
			const navControls = this.popover?.querySelector(
				".navigation-controls"
			);
			if (navControls) {
				navControls.remove();
			}
		}
	}

	// Global popover instance
	let bottomPopover: BottomPopover;

	// Navigation state
	let currentWords: HTMLElement[] = [];
	let currentWordIndex: number = -1;
	let isNavigationMode: boolean = false;

	function replaceTooltips(element: HTMLElement) {
		for (let node of element.childNodes) {
			if (node.nodeType === Node.TEXT_NODE) {
				// Skip if we're already inside a pali-word span
				if (node.parentElement?.closest(".pali-word")) {
					continue;
				}

				let text = node.textContent || "";
				// Replace |text::tooltip| pattern
				text = text.replace(
					/\|([^|:]+)::([^|]+)\|/g,
					(_, textPart, tooltip) => {
						// Parse any Markdown links in the tooltip content
						const parsedTooltip = parseMarkdownLinks(tooltip);
						// Store original content for popover
						return `<span class="tooltip-text" data-tooltip-content="${escapeHtml(parsedTooltip)}">${textPart}</span>`;
					}
				);
				const span = document.createElement("span");
				span.innerHTML = text;
				if (node.parentNode) {
					node.parentNode.replaceChild(span, node);
				}
			} else if (
				node.nodeType === Node.ELEMENT_NODE &&
				node instanceof HTMLElement
			) {
				replaceTooltips(node);
			}
		}
	}

	// Navigation functions
	function enableWordNavigation(clickedWord: HTMLElement) {
		isNavigationMode = true;

		// Get ALL pali words from ALL paragraphs (cross-paragraph navigation)
		currentWords = Array.from(document.querySelectorAll(".pali-word"));
		currentWordIndex = currentWords.indexOf(clickedWord);
		highlightCurrentWord();
	}

	function enableTooltipNavigation(clickedTooltip: HTMLElement) {
		isNavigationMode = true;

		// Get ALL tooltip elements from the page and filter out invalid ones
		const allTooltips = Array.from(
			document.querySelectorAll(".tooltip-text")
		) as HTMLElement[];
		currentWords = allTooltips.filter((el) => {
			const text = el.textContent?.trim();
			const content = el.getAttribute("data-tooltip-content");
			// Filter out tooltips with template variables or empty content
			return (
				text &&
				content &&
				!text.includes("${") &&
				!content.includes("${") &&
				text !== "${textPart}"
			);
		});

		currentWordIndex = currentWords.indexOf(clickedTooltip);
		highlightCurrentWord();
	}

	function disableWordNavigation() {
		isNavigationMode = false;
		currentWordIndex = -1;
		currentWords = [];
		clearWordHighlights();
		bottomPopover.removeNavigationControls();
	}

	function navigateToNextWord() {
		if (currentWordIndex < currentWords.length - 1) {
			currentWordIndex++;
			highlightCurrentWord();
			showCurrentWordDefinition();
			updateNavigationButtons();
		}
	}

	function navigateToPreviousWord() {
		if (currentWordIndex > 0) {
			currentWordIndex--;
			highlightCurrentWord();
			showCurrentWordDefinition();
			updateNavigationButtons();
		}
	}

	function navigateVertically(direction: "up" | "down") {
		const currentWord = currentWords[currentWordIndex];
		if (!currentWord) return;

		const targetWord = findWordVertically(currentWord, direction);
		if (targetWord) {
			const targetIndex = currentWords.indexOf(targetWord);
			if (targetIndex >= 0) {
				currentWordIndex = targetIndex;
				highlightCurrentWord();
				showCurrentWordDefinition();
				updateNavigationButtons();
			}
		}
	}

	// Spatial navigation function
	function findWordVertically(
		currentWord: HTMLElement,
		direction: "up" | "down"
	): HTMLElement | null {
		const currentRect = currentWord.getBoundingClientRect();
		const currentCenter = {
			x: currentRect.left + currentRect.width / 2,
			y: currentRect.top + currentRect.height / 2,
		};

		let bestMatch: HTMLElement | null = null;
		let bestDistance = Infinity;

		currentWords.forEach((word) => {
			if (word === currentWord) return;

			const wordRect = word.getBoundingClientRect();
			const wordCenter = {
				x: wordRect.left + wordRect.width / 2,
				y: wordRect.top + wordRect.height / 2,
			};

			// Check if word is in the right vertical direction
			const isInDirection =
				direction === "up"
					? wordCenter.y < currentCenter.y - 5 // 5px threshold to avoid same-line words
					: wordCenter.y > currentCenter.y + 5;

			if (!isInDirection) return;

			// Calculate weighted distance (prioritize vertical proximity, then horizontal)
			const verticalDistance = Math.abs(wordCenter.y - currentCenter.y);
			const horizontalDistance = Math.abs(wordCenter.x - currentCenter.x);

			// Weight vertical movement as primary, horizontal as secondary
			const totalDistance = verticalDistance + horizontalDistance * 0.2;

			if (totalDistance < bestDistance) {
				bestDistance = totalDistance;
				bestMatch = word;
			}
		});

		return bestMatch;
	}

	function updateNavigationButtons() {
		const popover = bottomPopover.getPopoverElement();
		const prevBtn = popover?.querySelector(
			".nav-prev"
		) as HTMLButtonElement;
		const nextBtn = popover?.querySelector(
			".nav-next"
		) as HTMLButtonElement;

		if (prevBtn) {
			prevBtn.disabled = currentWordIndex <= 0;
		}
		if (nextBtn) {
			nextBtn.disabled = currentWordIndex >= currentWords.length - 1;
		}
	}

	function highlightCurrentWord() {
		clearWordHighlights();

		if (currentWordIndex >= 0 && currentWordIndex < currentWords.length) {
			const currentWord = currentWords[currentWordIndex];
			// Use different highlight classes for different types
			if (currentWord.classList.contains("pali-word")) {
				currentWord.classList.add("pali-word-highlighted");
			} else if (currentWord.classList.contains("tooltip-text")) {
				currentWord.classList.add("tooltip-text-highlighted");
			}

			// Scroll word into view
			currentWord.scrollIntoView({
				behavior: "smooth",
				block: "center",
				inline: "center",
			});
		}
	}

	function clearWordHighlights() {
		document
			.querySelectorAll(
				".pali-word-highlighted, .tooltip-text-highlighted"
			)
			.forEach((word) => {
				word.classList.remove(
					"pali-word-highlighted",
					"tooltip-text-highlighted"
				);
			});
	}

	async function showCurrentWordDefinition() {
		if (currentWordIndex >= 0 && currentWordIndex < currentWords.length) {
			const word = currentWords[currentWordIndex];

			// Check if it's a Pali word or English tooltip
			if (word.classList.contains("pali-word")) {
				const cleanWord = word.dataset.word || word.textContent || "";
				await showDictionaryPopover(cleanWord, true);
			} else if (word.classList.contains("tooltip-text")) {
				const content = word.getAttribute("data-tooltip-content") || "";
				const primaryText = word.textContent || "";
				bottomPopover.show(content, "markdown", primaryText);
				addNavigationControls(); // Add navigation controls for English tooltips
			}
		}
	}

	function addNavigationControls() {
		if (!isNavigationMode) return;

		const navigationHtml = `
			<div class="navigation-controls">
				<button class="nav-btn nav-prev" ${currentWordIndex <= 0 ? "disabled" : ""}>
					<svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
						<path d="M11.354 1.646a.5.5 0 0 1 0 .708L5.707 8l5.647 5.646a.5.5 0 0 1-.708.708l-6-6a.5.5 0 0 1 0-.708l6-6a.5.5 0 0 1 .708 0z"/>
					</svg>
					Previous
				</button>
				<button class="nav-btn nav-next" ${currentWordIndex >= currentWords.length - 1 ? "disabled" : ""}>
					Next
					<svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
						<path d="M4.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L10.293 8 4.646 2.354a.5.5 0 0 1 0-.708z"/>
					</svg>
				</button>
			</div>
		`;

		bottomPopover.addNavigationControls(navigationHtml);
		setupNavigationEventListeners();
	}

	function setupNavigationEventListeners() {
		const popover = bottomPopover.getPopoverElement();
		const prevBtn = popover?.querySelector(".nav-prev");
		const nextBtn = popover?.querySelector(".nav-next");

		prevBtn?.addEventListener("click", navigateToPreviousWord);
		nextBtn?.addEventListener("click", navigateToNextWord);
	}

	async function showDictionaryPopover(
		word: string,
		enableNavigation: boolean = false
	) {
		if (!bottomPopover) return;

		// Show loading state
		bottomPopover.show(
			`
			<div class="loading-spinner">
				<svg class="animate-spin h-5 w-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
					<circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
					<path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
				</svg>
				<span class="ml-2">Loading definition...</span>
			</div>
		`,
			"dictionary"
		);

		try {
			const data = await lookupSingleWord(word);

			if (data && data.definitions && data.definitions.length > 0) {
				const content = createTooltipContent(word, data);
				bottomPopover.show(content, "dictionary");

				if (enableNavigation) addNavigationControls();
			} else {
				bottomPopover.show(
					`<div><span style="font-family: 'Gentium Plus', serif;">${word}</span>: No definition found</div>`,
					"dictionary"
				);
			}
		} catch (error) {
			console.error("Failed to load definition:", error);
			bottomPopover.show("Failed to load definition", "dictionary");
		}
	}

	function createTooltipContent(word: string, data: any) {
		const { definitions } = data;

		// Check if this is a compound word by looking for constituent patterns in meanings
		const isCompound = definitions.some((def: any) => {
			const matches =
				def.meaning && /^[^\s]+\s+\d+\.\s/.test(def.meaning);
			return matches;
		});

		if (isCompound) {
			return createCompoundTooltipContent(word, data);
		}

		// Use the same clean style for regular words
		return createUnifiedTooltipContent(word, data);
	}

	function createUnifiedTooltipContent(word: string, data: any) {
		const { definitions } = data;

		return `
			<div class="tooltip-content">
				<div class="title">
					<span>${word}</span>
					${
						definitions[0].construction
							? `
						<span>
							<span class="construction">${definitions[0].construction.replace(/\n/g, " ; ")}</span>
						</span>`
							: ""
					}
					<span>
						${definitions[0].pos ? `<span class="grammar">${definitions[0].pos}</span>` : ""}
					</span>
				</div>
				<div class="dpd-content compound-content">
					<div class="constituent-group">
						<div class="constituent-header">${definitions[0] ? definitions[0].lemma.replace(/ \d+$/, "") : word}:</div>
						<div class="constituent-meanings">
							${definitions
								.map(
									(def: any, idx: number) => `
								<div class="meaning-item">${idx + 1}. ${def.meaning}${def.meaning_lit ? `; <em>lit. ${def.meaning_lit}</em>` : ""}</div>
							`
								)
								.join("")}
						</div>
					</div>
				</div>
			</div>
		`;
	}

	function createCompoundTooltipContent(word: string, data: any) {
		const { definitions } = data;

		// Group definitions by constituent
		const constituents = new Map();

		definitions.forEach((def: any) => {
			if (def.meaning) {
				const match = def.meaning.match(/^([^\s]+)\s+(\d+)\.\s(.+)$/);
				if (match) {
					const [, constituent, num, meaning] = match;
					if (!constituents.has(constituent)) {
						constituents.set(constituent, []);
					}
					constituents.get(constituent).push(`${num}. ${meaning}`);
				}
			}
		});

		return `
			<div class="tooltip-content">
				<div class="title">
					<span>${word}</span>
					${
						definitions[0].construction
							? `
						<span>
							<span class="construction">${definitions[0].construction.replace(/\n/g, " ; ")}</span>
						</span>`
							: ""
					}
					<span>
						${definitions[0].pos ? `<span class="grammar">${definitions[0].pos}</span>` : ""}
					</span>
				</div>
				<div class="dpd-content compound-content">
					${Array.from(constituents.entries())
						.map(
							([constituent, meanings]) => `
						<div class="constituent-group">
							<div class="constituent-header">${constituent}:</div>
							<div class="constituent-meanings">
								${meanings
									.map(
										(meaning: string) => `
									<div class="meaning-item">${meaning}</div>
								`
									)
									.join("")}
							</div>
						</div>
					`
						)
						.join("")}
				</div>
			</div>
		`;
	}

	// Add this new function to insert actual spaces
	function addCopyableSpaces() {
		const paliParagraphs = document.querySelectorAll(".pali-paragraph");

		paliParagraphs.forEach((paragraph) => {
			const children = Array.from(paragraph.childNodes);

			for (let i = children.length - 1; i >= 0; i--) {
				const child = children[i];

				// If this is a pali-word span and it's not the last child
				if (
					child.nodeType === Node.ELEMENT_NODE &&
					(child as Element).classList.contains("pali-word") &&
					i < children.length - 1
				) {
					// Check if the next sibling is a word-space span
					const nextSibling = children[i + 1];
					if (
						nextSibling &&
						nextSibling.nodeType === Node.ELEMENT_NODE &&
						(nextSibling as Element).classList.contains(
							"word-space"
						)
					) {
						// Insert a text node with a space after the pali-word
						const spaceNode = document.createTextNode(" ");
						paragraph.insertBefore(spaceNode, nextSibling);
					}
				}
			}
		});
	}

	document.addEventListener("DOMContentLoaded", () => {
		replaceTooltips(document.body);
		bottomPopover = new BottomPopover();

		// Add spaces after Pali words for proper copying
		addCopyableSpaces();

		// Handle |text::tooltip| clicks
		document.addEventListener("click", (e) => {
			const tooltipElement = (e.target as HTMLElement).closest(
				".tooltip-text"
			);
			if (tooltipElement) {
				e.preventDefault();
				const content =
					tooltipElement.getAttribute("data-tooltip-content") || "";
				const primaryText = tooltipElement.textContent || "";
				// Enable navigation for English tooltips
				enableTooltipNavigation(tooltipElement as HTMLElement);
				bottomPopover.show(content, "markdown", primaryText);
				// Add navigation controls for English tooltips
				addNavigationControls();
				return;
			}

			// Handle Pali word clicks
			const paliWord = (e.target as HTMLElement).closest(".pali-word");
			if (paliWord && localStorage.getItem("paliLookup") === "true") {
				e.preventDefault();
				const word =
					(paliWord as HTMLElement).dataset.word ||
					paliWord.textContent ||
					"";
				enableWordNavigation(paliWord as HTMLElement);
				// Pali dictionary content gets navigation - pass true for enableNavigation
				showDictionaryPopover(word, true);
				return;
			}
		});

		// Handle Pali word lookup if enabled
		if (localStorage.getItem("paliLookup") === "true") {
			// Desktop: double-click handler
			if (!("ontouchstart" in window)) {
				document.addEventListener("dblclick", (e) => {
					const target = e.target as HTMLElement;
					if (!target.closest(".pali-paragraph")) return;

					const selection = window.getSelection();
					const text = selection?.toString().trim();
					if (!text || /\s/.test(text)) return;

					showDictionaryPopover(text);
				});
			}

			// Mobile: touch handler
			if ("ontouchstart" in window) {
				let startTouch: Touch | null = null;

				document.addEventListener("contextmenu", (e) => {
					const target = e.target as HTMLElement;
					if (target.closest(".pali-paragraph")) {
						e.preventDefault();
					}
				});

				document.addEventListener(
					"touchstart",
					(e) => {
						const target = e.target as HTMLElement;
						if (!target.closest(".pali-paragraph")) return;
						startTouch = e.touches[0];
					},
					{ passive: true }
				);

				document.addEventListener(
					"touchend",
					(e) => {
						if (!startTouch) return;

						const selection = window.getSelection();
						const text = selection?.toString().trim();

						if (text && !text.includes(" ")) {
							showDictionaryPopover(text);
						}
						startTouch = null;
					},
					{ passive: true }
				);
			}
		}

		// Override popover hide to disable navigation mode
		const originalHide = bottomPopover.hide.bind(bottomPopover);
		bottomPopover.hide = function () {
			disableWordNavigation();
			originalHide();
		};

		// Keyboard navigation
		document.addEventListener(
			"keydown",
			(e) => {
				// Handle escape key for any open drawer
				if (e.key === "Escape" && bottomPopover?.isOpen()) {
					e.preventDefault();
					e.stopPropagation();
					e.stopImmediatePropagation();
					if (isNavigationMode) {
						disableWordNavigation();
					}
					bottomPopover.hide();
					return;
				}

				// Only handle other keyboard shortcuts when navigation mode is active and drawer is open
				if (!isNavigationMode || !bottomPopover?.isOpen()) return;

				// Check if this is a navigation key we want to handle
				const isNavigationKey = [
					"ArrowLeft",
					"ArrowRight",
					"ArrowUp",
					"ArrowDown",
				].includes(e.key);

				if (isNavigationKey) {
					// Stop all event propagation to prevent browser extension interference
					e.preventDefault();
					e.stopPropagation();
					e.stopImmediatePropagation();

					switch (e.key) {
						case "ArrowLeft":
							navigateToPreviousWord();
							break;

						case "ArrowRight":
							navigateToNextWord();
							break;

						case "ArrowUp":
							// For Pali words, use vertical navigation; for English tooltips, use sequential
							if (
								currentWords.length > 0 &&
								currentWords[
									currentWordIndex
								]?.classList.contains("pali-word")
							) {
								navigateVertically("up");
							} else {
								navigateToPreviousWord();
							}
							break;

						case "ArrowDown":
							// For Pali words, use vertical navigation; for English tooltips, use sequential
							if (
								currentWords.length > 0 &&
								currentWords[
									currentWordIndex
								]?.classList.contains("pali-word")
							) {
								navigateVertically("down");
							} else {
								navigateToNextWord();
							}
							break;
					}
				}
			},
			true
		); // Use capture phase to handle before other listeners
	});
</script>
