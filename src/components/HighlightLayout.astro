---
import CopyButton from "./CopyButton.astro";
import { verifyUser } from "../middleware/auth";
import Eraser from "../assets/eraser.svg?raw";
import "../styles/highlight.css";

// Get authentication status
let isAuthenticated = false;
try {
	const sessionCookie = Astro.cookies.get("__session")?.value;
	if (sessionCookie) {
		const user = await verifyUser(sessionCookie);
		isAuthenticated = !!user;
	}
} catch (error) {
	// Invalid cookie
}

// HighlightLayout.astro
const currentPath = Astro.url.pathname;

const COLOR_MAP = {
	yellow: "#FEF08A",
	pink: "#FBCFE8",
	green: "#BBF7D0",
	blue: "#BFDBFE",
} as const;

// Add blacklist for pages where highlighting should be disabled
const HIGHLIGHT_BLACKLIST = [
	"/review-room",
	"/search",
	"/profile",
	"/signin",
	"/register",
	"/about",
	"/topic",
	"/quality",
	"/simile",
	"/discover",
	"/on/",
	"/api/",
	"/anthologies/",
	"/offline",
	"/privacy",
	"/public-domain",
	"/buddha-quotes",
];

const isHighlightingDisabled = HIGHLIGHT_BLACKLIST.some((path) =>
	currentPath.startsWith(path)
);

const { title, description } = Astro.props;
---

<div
	id="highlight-root"
	class:list={["highlight-container"]}
	data-authenticated={isAuthenticated}
	data-title={title}
	data-description={description}
	data-highlight-disabled={isHighlightingDisabled}
>
	<slot />

	<div id="highlight-menu" class="highlight-menu" style="display: none;">
		<div class="menu-items">
			<CopyButton />
			{
				Object.entries(COLOR_MAP).map(([colorName, bgColor]) => (
					<button
						data-color={colorName}
						style={`background-color: ${bgColor}`}
						class="color-swatch"
					/>
				))
			}
			<button
				id="highlight-eraser"
				class="eraser-btn"
				style="display: none;"
			>
				<Fragment set:html={Eraser} />
			</button>
		</div>
	</div>

	<!-- Sign in prompt -->
	<div id="highlight-signin" class="highlight-signin" style="display: none;">
		<a href={`/signin?returnTo=${currentPath}`} class="signin-link"
			>Sign in to highlight and add notes</a
		>
	</div>
</div>

<script>
	// Remove duplicate interface definitions since they're now in rangy.d.ts
	declare global {
		interface Window {
			rangy: RangyStatic;
			selectionHandler: any;
			highlightService: any;
		}
	}

	// Import rangy dynamically to ensure proper typing
	const importRangy = async () => {
		const rangy = (await import("rangy")).default;
		await import("rangy/lib/rangy-classapplier");
		await import("rangy/lib/rangy-highlighter");
		await import("rangy/lib/rangy-selectionsaverestore");
		return rangy;
	};

	let highlighter: Highlighter | null = null;
	let currentRange: Range | null = null;
	let menu = document.getElementById("highlight-menu") as HTMLDivElement;
	let rootElement: HTMLElement | null = null;
	let outsideClickListener: ((e: MouseEvent) => void) | null = null;
	let restoreScheduled = false; // prevent duplicate restore scheduling

	// Mobile detection and range preservation
	let isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);
	let savedRange: Range | null = null;
	let isMouseDown = false;

	const COLOR_MAP = {
		yellow: "#FEF08A",
		pink: "#FBCFE8",
		green: "#BBF7D0",
		blue: "#BFDBFE",
	} as const;

	type ColorName = keyof typeof COLOR_MAP;

	// Theme handling
	function updateDarkMode(): void {
		if (!rootElement)
			rootElement = document.getElementById("highlight-root");
		if (!rootElement) return;

		const isDark = document.documentElement.classList.contains("dark");
		if (isDark) {
			rootElement.classList.add("dark-mode");
		} else {
			rootElement.classList.remove("dark-mode");
		}
	}

	function updateTheme(): void {
		const isDark = document.documentElement.classList.contains("dark");
		if (menu) {
			menu.style.setProperty("--bg-color", isDark ? "#1f2937" : "#fff");
			menu.style.setProperty(
				"--border-color",
				isDark ? "#374151" : "#e5e7eb"
			);
		}
		updateDarkMode();
	}

	// Initialize everything after Rangy is loaded
	async function initializeHighlighter(): Promise<void> {
		try {
			// Check if highlighting is disabled for this page
			if (rootElement?.dataset.highlightDisabled === "true") {
				return;
			}
			const rangy = await importRangy();
			window.rangy = rangy;
			rangy.init();
			highlighter = rangy.createHighlighter();

			Object.entries(COLOR_MAP).forEach(([colorName, bgColor]) => {
				const applier = rangy.createClassApplier(
					`highlight-${colorName}`,
					{
						elementTagName: "mark",
						splitExisting: true,
						normalize: true,
					}
				);
				if (highlighter) {
					highlighter.addClassApplier(applier);
				}
			});

			// Set up event listeners first
			setupEventListeners();

			// Schedule restore (will no-op if unauthenticated yet)
			scheduleRestore();
		} catch (error) {
			console.error("[highlight] Failed to initialize:", error);
		}
	}

	// Client-side imports need to be dynamic or use the ?inline suffix
	const selectionHandler = await import("../service/selectionHandler");
	const highlightService = await import("../service/highlightService");

	function scheduleRestore(attempt: number = 0) {
		if (!rootElement)
			rootElement = document.getElementById("highlight-root");
		if (!rootElement) return;
		if (rootElement.dataset.highlightsLoaded === "true") return;
		if (restoreScheduled && attempt === 0) return; // skip duplicate first call
		if (!highlighter) {
			// Highlighter not ready yet; retry a few times (max ~1s)
			if (attempt < 10) {
				setTimeout(() => scheduleRestore(attempt + 1), 100);
			}
			return;
		}
		if (rootElement.dataset.authenticated !== "true") return; // only restore for authed users
		restoreScheduled = true;
		const run = async () => {
			if (!highlighter) return;
			if (rootElement!.dataset.highlightsLoaded === "true") return;
			try {
				await highlightService.fetchHighlights(highlighter);
				rootElement!.dataset.highlightsLoaded = "true";
			} catch (e) {
				console.warn("[highlight] restore failed", e);
			}
		};
		if ("requestIdleCallback" in window) {
			(requestIdleCallback as any)(run, { timeout: 1500 });
		} else {
			setTimeout(run, 0);
		}
	}

	// Hydrate auth state on client (mirrors navbar logic) so prerendered pages can enable highlights
	async function hydrateAuth() {
		try {
			if (!rootElement)
				rootElement = document.getElementById("highlight-root");
			if (!rootElement) return;
			// Already authenticated or tried
			if (rootElement.dataset.authenticated === "true") return;
			const res = await fetch("/api/auth/me", {
				credentials: "same-origin",
			});
			if (!res.ok) return;
			const data = await res.json();
			if (data?.signedIn) {
				rootElement.dataset.authenticated = "true";
				// Now that we're authenticated, attempt restoration
				scheduleRestore();
			}
		} catch (e) {
			/* ignore */
		}
	}

	function handleSelection(e: MouseEvent | TouchEvent) {
		if (!window.rangy || !highlighter) {
			return;
		}

		menu.style.display = "none";
		document.getElementById("highlight-signin")!.style.display = "none";

		const target = e.target as HTMLElement;
		const selection = window.rangy.getSelection();

		// Early validations
		if (
			selection.isCollapsed ||
			!selection.rangeCount ||
			!selectionHandler.isSelectionValid(selection)
		) {
			return;
		}

		// Handle tooltip and Pali cases
		const isPaliContext = checkPaliContext(target, selection);
		if (isPaliContext) {
			return;
		}

		// Check if selection intersects with collapse elements
		const intersectsCollapse = checkCollapseIntersection(selection);

		// Show appropriate menu based on auth status
		const isAuthenticated = rootElement?.dataset.authenticated === "true";

		if (!isAuthenticated) {
			const signinPrompt = document.getElementById("highlight-signin")!;
			const { savedRange: newSavedRange } =
				selectionHandler.updateMenuPosition(
					selection,
					signinPrompt,
					rootElement,
					currentRange,
					menu,
					highlighter
				);
			savedRange = newSavedRange;
			return;
		}

		// Show menu and configure based on collapse intersection
		menu.style.display = "block";
		const { savedRange: newSavedRange } =
			selectionHandler.updateMenuPosition(
				selection,
				menu,
				rootElement,
				currentRange,
				menu,
				highlighter
			);
		savedRange = newSavedRange;

		// Show/hide highlight colors based on collapse intersection
		updateHighlightingAvailability(intersectsCollapse);

		// Add outside click listener
		setupOutsideClickListener();
	}

	function checkCollapseIntersection(selection: RangySelection): boolean {
		if (!selection.rangeCount) return false;

		for (let i = 0; i < selection.rangeCount; i++) {
			const range = selection.getRangeAt(i).nativeRange;
			if (!range) continue;

			// Check if selection starts or ends within a collapse element
			const startElement =
				range.startContainer.nodeType === Node.ELEMENT_NODE
					? (range.startContainer as Element)
					: range.startContainer.parentElement;
			const endElement =
				range.endContainer.nodeType === Node.ELEMENT_NODE
					? (range.endContainer as Element)
					: range.endContainer.parentElement;

			// Check if start or end is within a collapse element
			if (startElement && isWithinCollapseElement(startElement)) {
				return true;
			}
			if (endElement && isWithinCollapseElement(endElement)) {
				return true;
			}

			// Check if any collapse elements are contained within the range
			const commonAncestor = range.commonAncestorContainer;
			if (commonAncestor.nodeType === Node.ELEMENT_NODE) {
				const collapseElements = (
					commonAncestor as Element
				).querySelectorAll(".collapse-toggle");

				for (const collapseEl of collapseElements) {
					if (range.intersectsNode(collapseEl)) {
						return true;
					}
				}
			} else if (commonAncestor.parentElement) {
				// If common ancestor is a text node, check its parent
				const collapseElements =
					commonAncestor.parentElement.querySelectorAll(
						".collapse-toggle"
					);

				for (const collapseEl of collapseElements) {
					if (range.intersectsNode(collapseEl)) {
						return true;
					}
				}
			}
		}

		return false;
	}

	function updateHighlightingAvailability(intersectsCollapse: boolean): void {
		// Show/hide color swatches based on collapse intersection
		const colorSwatches = document.querySelectorAll(".color-swatch");
		const eraserBtn = document.getElementById("highlight-eraser");

		colorSwatches.forEach((swatch) => {
			const display = intersectsCollapse ? "none" : "block";
			(swatch as HTMLElement).style.display = display;
		});

		// Also hide eraser if highlighting is disabled
		if (eraserBtn) {
			if (intersectsCollapse) {
				eraserBtn.style.display = "none";
			} else {
				// Keep existing eraser visibility logic (show only if there are existing highlights)
				if (highlighter && window.rangy) {
					const selection = window.rangy.getSelection();
					const existing =
						highlighter.getHighlightsInSelection(selection);
					const display = existing.length > 0 ? "flex" : "none";
					eraserBtn.style.display = display;
				}
			}
		}
	}

	function isWithinCollapseElement(element: Element): boolean {
		let current = element;
		while (current && current !== rootElement) {
			if (current.classList?.contains("collapse-toggle")) {
				return true;
			}
			current = current.parentElement!;
		}
		return false;
	}

	function checkPaliContext(
		target: HTMLElement,
		selection: RangySelection
	): boolean {
		const isPaliParagraph = target.closest(".pali-paragraph");
		const isPaliLookupEnabled =
			localStorage.getItem("paliLookup") === "true";
		const selectedText = selection.toString().trim();
		const isSingleWord = selectedText && !selectedText.includes(" ");
		return Boolean(isPaliLookupEnabled && isPaliParagraph && isSingleWord);
	}

	function setupOutsideClickListener() {
		outsideClickListener = (e: MouseEvent) => {
			const target = e.target as Node;
			if (!menu.contains(target)) {
				menu.style.display = "none";
				window.getSelection()?.removeAllRanges();
				document.removeEventListener(
					"mousedown",
					outsideClickListener!
				);
			}
		};
		document.addEventListener("mousedown", outsideClickListener);
	}

	// Keep core highlight application
	function applyHighlight(colorName: ColorName): void {
		if (!highlighter || !window.rangy) return;

		// Double check that we're not trying to highlight collapse intersections
		const selection = window.rangy.getSelection();
		const intersectsCollapse = checkCollapseIntersection(selection);
		if (intersectsCollapse) {
			console.warn(
				"Attempted to highlight selection that intersects with collapse elements"
			);
			return;
		}

		if (isMobile && savedRange) {
			setTimeout(() => {
				try {
					selection.removeAllRanges();
					selection.addRange(savedRange!);
					selection.refresh();
					applyHighlightToSelection(colorName, selection);
				} catch (e) {
					console.log("Range restoration error:", e);
				}
			}, 100);
		} else {
			applyHighlightToSelection(colorName, selection);
		}
	}

	function applyHighlightToSelection(
		colorName: ColorName,
		selection: RangySelection
	) {
		if (!selection.rangeCount) return;

		highlighter!.highlightSelection(`highlight-${colorName}`, {
			selection: selection,
			containerElementId: "highlight-root",
			exclusive: true, // Remove existing highlights in selection
		});

		persist();
		menu.style.display = "none";

		if (!isMobile) {
			window.getSelection()?.removeAllRanges();
		}
	}

	function handleClear(): void {
		if (!highlighter || !window.rangy) return;

		const selection = window.rangy.getSelection();

		// Double check that we're not trying to clear highlights in collapse intersections
		const intersectsCollapse = checkCollapseIntersection(selection);
		if (intersectsCollapse) {
			console.warn(
				"Attempted to clear highlights in selection that intersects with collapse elements"
			);
			return;
		}

		if (isMobile && savedRange) {
			try {
				selection.removeAllRanges();
				selection.addRange(savedRange);
				selection.refresh();
			} catch (e) {
				console.log("Clear range error:", e);
				return;
			}
		}

		const existing = highlighter.getHighlightsInSelection(selection);
		if (existing.length > 0) {
			highlighter.removeHighlights(existing);

			// Get the updated state after removal
			const updatedRangyHash = highlighter.serialize();
			persist(updatedRangyHash, "delete");
		}

		if (!isMobile) {
			window.getSelection()?.removeAllRanges();
		}

		menu.style.display = "none";
	}

	function persist(
		rangyHash?: string,
		operation: "add" | "delete" = "add"
	): void {
		if (!highlighter) return;
		const serialized = rangyHash || highlighter.serialize();
		highlightService.persistToFirestore(serialized, highlighter);
	}

	// Keep event setup and initialization
	function setupEventListeners(): void {
		document.addEventListener("mousedown", () => {
			isMouseDown = true;
		});
		document.addEventListener("mouseup", handleMouseUp);
		document.addEventListener("touchend", handleSelection);
		document.addEventListener("selectionchange", handleSelectionChange);
		setupSwatchListeners();
		const eraserBtn = document.getElementById("highlight-eraser");
		if (eraserBtn) {
			eraserBtn.addEventListener("click", handleClear);
			eraserBtn.addEventListener("touchend", handleClear);
		}
	}

	function handleMouseUp(e: MouseEvent) {
		isMouseDown = false;
		handleSelection(e);
	}

	// Add handleSelectionChange function that was missing
	function handleSelectionChange() {
		if (!window.rangy || !highlighter) return;
		menu.style.display = "none";
		const selection = window.rangy.getSelection();
		if (selection.isCollapsed || selection.rangeCount === 0) return;
	}

	// Add setupSwatchListeners function that was missing
	function setupSwatchListeners() {
		document
			.querySelectorAll<HTMLButtonElement>(".color-swatch")
			.forEach((swatch) => {
				swatch.addEventListener("touchend", (e) => {
					e.preventDefault();
					const colorName = swatch.dataset.color as ColorName;
					if (colorName) applyHighlight(colorName);
				});
				swatch.addEventListener("click", () => {
					const colorName = swatch.dataset.color as ColorName;
					if (colorName) applyHighlight(colorName);
				});
			});
	}

	async function init() {
		rootElement = document.getElementById("highlight-root");
		menu = document.getElementById("highlight-menu") as HTMLDivElement;

		try {
			const [selectionHandlerModule, highlightServiceModule] =
				await Promise.all([
					import("../service/selectionHandler"),
					import("../service/highlightService"),
				]);

			window.selectionHandler = selectionHandlerModule;
			window.highlightService = highlightServiceModule;

			updateDarkMode();
			updateTheme();
			window.addEventListener("themeToggled", updateDarkMode);
			document.addEventListener("themeChanged", updateTheme);
			// Fire off auth hydration & highlighter init without blocking interactivity
			hydrateAuth();
			initializeHighlighter().catch((e) =>
				console.error("[highlight] init fail", e)
			);
		} catch (error) {
			console.error("[highlight] Init error:", error);
		}
	}

	// Replace DOMContentLoaded with immediate init if document is already loaded
	if (document.readyState === "loading") {
		document.addEventListener("DOMContentLoaded", init);
	} else {
		init();
	}
</script>
