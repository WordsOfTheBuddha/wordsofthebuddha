---
import { transformId } from "../utils/transformId";
interface Props {
	title: string;
	description: string;
	id: string;
	lastUpdated?: string | Date;
	dateLabel?: string;
	clamp?: number;
	count?: number; // Added count property
	titleTag?: string; // Added title tag property
}

export const formatDate = (date: string | Date) => {
	return new Date(date).toLocaleDateString("en-US", {
		year: "numeric",
		month: "long",
		day: "numeric",
	});
};

const {
	title,
	description,
	id,
	lastUpdated,
	dateLabel = "Last updated on",
	clamp = 3,
	count = 0, // Default count to 0
	titleTag, // Added title tag
} = Astro.props;
---

<div
	class="post-item relative flex flex-col w-full p-5 mt-6 rounded-lg bg-white dark:bg-gray-800 text-gray-800 dark:text-gray-200 transition-shadow duration-200 shadow-md dark:shadow-[0_0_10px_rgba(255,255,255,0.1)] hover:shadow-lg dark:hover:shadow-[0_0_15px_rgba(255,255,255,0.2)]"
>
	<div class="flex items-start justify-between">
		<div class="flex items-start flex-grow">
			<div class="min-w-0 pr-4">
				<h2 class="text-base sm:text-lg font-semibold text-text">
					<a
						href={`/${id}`}
						class="post-link text-gray-500 hover:text-link-color id mr-2 font-normal"
						data-base-href={`/${id}`}
					>
						{transformId(id)}&nbsp;<span
							style="color:var(--text-color)">{title}</span
						></a
					>
					{
						titleTag && (
							<span class="ml-2 px-2 py-1 text-xs rounded-full font-normal bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-300 whitespace-nowrap inline-block align-bottom -translate-y-0.5 mt-1">
								{titleTag}
							</span>
						)
					}
				</h2>
			</div>
			<div class="flex items-center shrink-0">
				<button
					class="text-gray-400 hover:text-gray-600 opacity-0 transition-opacity duration-200"
				>
					<svg
						xmlns="http://www.w3.org/2000/svg"
						class="w-6 h-6"
						fill="none"
						viewBox="0 0 24 24"
						stroke="currentColor"
					>
						<path
							stroke-linecap="round"
							stroke-linejoin="round"
							stroke-width="2"
							d="M5 5a2 2 0 012-2h10a2 2 0 012 2v16l-7-3.5L5 21V5z"
						></path>
					</svg>
				</button>
			</div>
		</div>
		{
			count > 0 && (
				<div class="shrink-0 self-start">
					<span class="px-2 py-0.5 rounded-md text-xs font-medium text-white bg-primary shadow-sm">
						{count}
					</span>
				</div>
			)
		}
	</div>
	<p class=`mt-2 text-text line-clamp-${clamp} text-sm sm:text-base`>
		{
			description?.replace(
				/\[([^\]]+)\]\(([^)]+)\)/g,
				'<a href="$2" class="text-blue-600 hover:underline">$1</a>'
			)
		}
	</p>
	{
		lastUpdated && (
			<p class="text-gray-500 text-xs my-0 text-right">
				{dateLabel} {formatDate(lastUpdated)}
			</p>
		)
	}
</div>

<script>
	function updatePostLinks() {
		const paliMode = localStorage.getItem("paliMode") === "true";
		const layout = localStorage.getItem("layout") || "interleaved";
		const links = document.querySelectorAll("a.post-link");

		links.forEach((link) => {
			const baseHref = link.getAttribute("data-base-href");
			const params = new URLSearchParams();
			if (paliMode) params.set("pli", "true");
			if (layout === "split") params.set("layout", layout);
			if (params.toString()) {
				(link as HTMLAnchorElement).href =
					`${baseHref}?${params.toString()}`;
			}
		});
	}

	document.addEventListener("DOMContentLoaded", updatePostLinks);
</script>

<style>
	.id {
		font-size: 0.95rem;
		display: inline-block;
		@media (min-width: 640px) {
			font-size: 1.1rem;
		}
	}
	.bg-background {
		background-color: var(--background-color);
	}
	.text-text {
		color: var(--text-color);
		margin: 0.5rem 0;
	}
	.hover\:text-link-color:hover {
		color: var(--link-color);
	}
	.bg-primary {
		background-color: color-mix(
			in srgb,
			var(--primary-color),
			transparent 20%
		);
		box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
	}
</style>
