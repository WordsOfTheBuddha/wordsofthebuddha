---
interface Props {
	title: string;
	description: string;
	id: string;
}

const { title, description, id } = Astro.props;

// Function to transform the ID based on character and digit boundaries
const transformId = (id: string) => {
	if (typeof id !== "string") return "";
	return id.replace(/([a-zA-Z]+)(\d+)/, (_, chars, digits) => {
		return `${chars.toUpperCase()} ${digits}`;
	});
};
---

<div
	class="relative flex flex-col w-full p-5 mt-6 rounded-lg bg-white dark:bg-gray-800 text-gray-800 dark:text-gray-200 transition-shadow duration-200 shadow-md dark:shadow-[0_0_10px_rgba(255,255,255,0.1)] hover:shadow-lg dark:hover:shadow-[0_0_15px_rgba(255,255,255,0.2)]"
>
	<div class="flex items-start">
		<div class="min-w-0 pr-4">
			<h2 class="text-lg sm:text-base font-semibold text-text">
				<a
					href={id}
					class="text-gray-500 hover:text-link-color id whitespace-nowrap mr-2 font-normal"
					>{transformId(id)}</a
				>
				{title}
			</h2>
		</div>
		<div class="flex items-center shrink-0">
			<button
				class="text-gray-400 hover:text-gray-600 opacity-0 transition-opacity duration-200"
			>
				<svg
					xmlns="http://www.w3.org/2000/svg"
					class="w-6 h-6"
					fill="none"
					viewBox="0 0 24 24"
					stroke="currentColor"
				>
					<path
						stroke-linecap="round"
						stroke-linejoin="round"
						stroke-width="2"
						d="M5 5a2 2 0 012-2h10a2 2 0 012 2v16l-7-3.5L5 21V5z"></path>
				</svg>
			</button>
		</div>
	</div>
	<p class="mt-2 text-text line-clamp-3 sm:text-sm">{description}</p>
</div>

<style>
	.id {
		font-size: 0.95rem;
		display: inline-block;
		@media (min-width: 640px) {
			font-size: 1.1rem;
		}
	}
	.bg-background {
		background-color: var(--background-color);
	}
	.text-text {
		color: var(--text-color);
		margin: 0.5rem 0;
	}
	.hover\:text-link-color:hover {
		color: var(--link-color);
	}
</style>
