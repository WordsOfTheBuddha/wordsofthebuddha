---
import ClockOutline from "../assets/clock-outline.svg?raw";
import Check from "../assets/check.svg?raw";
import SignInPrompt from "./SignInPrompt.astro";

// Get slug for API calls
const slug = Astro.url.pathname.replace(/^\/+/, "");

// Initial state will be determined by client-side JS
const userId = null;
---

<div class="relative shrink-0">
	<button
		id="readLaterButton"
		class:list={[
			"inline-flex items-center gap-1 px-4 py-2 text-sm rounded-full transition-all duration-300 hover:bg-gray-100 dark:hover:bg-gray-800",
		]}
		aria-label="Read Later content"
		data-authenticated={Boolean(userId)}
		data-loading="true"
		data-slug={slug}
	>
		<span id="readLaterIcon" class="w-4 h-4" set:html={ClockOutline} />
		<span id="readLaterCheckIcon" class="w-4 h-4 hidden" set:html={Check} />
		<span id="readLaterLabel">Read Later</span>
	</button>
	<SignInPrompt
		id="readLaterSignInPrompt"
		feature="add this page for later reading"
	/>
</div>

<script>
	const btn = document.getElementById("readLaterButton");
	const outline = document.getElementById("readLaterIcon");
	const check = document.getElementById("readLaterCheckIcon");
	const readLaterLabel = document.getElementById("readLaterLabel");
	const prompt = document.getElementById("readLaterSignInPrompt");
	const slug =
		btn?.dataset.slug || window.location.pathname.replace(/^\/+/, "");

	// Local storage key for offline mode
	const READ_LATER_ITEMS_KEY = "offlineReadLaterItems";

	function updateState(isSaved: boolean) {
		if (isSaved) {
			btn?.setAttribute("style", "color: var(--layout-active-color)");
			outline?.classList.add("hidden");
			check?.classList.remove("hidden");
			if (readLaterLabel)
				readLaterLabel.innerText = "Added to Read Later";
		} else {
			btn?.removeAttribute("style");
			outline?.classList.remove("hidden");
			check?.classList.add("hidden");
			if (readLaterLabel) readLaterLabel.innerText = "Read Later";
		}
	}

	// Load read later state from local storage
	function getOfflineReadLaterState(): boolean {
		try {
			const items = JSON.parse(
				localStorage.getItem(READ_LATER_ITEMS_KEY) || "[]"
			);
			return items.includes(slug);
		} catch (e) {
			return false;
		}
	}

	// Update local storage for offline mode
	function updateOfflineReadLaterState(isActive: boolean) {
		try {
			let items = JSON.parse(
				localStorage.getItem(READ_LATER_ITEMS_KEY) || "[]"
			);
			if (isActive && !items.includes(slug)) {
				items.push(slug);
			} else if (!isActive) {
				items = items.filter((item: string) => item !== slug);
			}
			localStorage.setItem(READ_LATER_ITEMS_KEY, JSON.stringify(items));
		} catch (e) {
			console.error("Error updating offline read later state", e);
		}
	}

	// Check read later status from server or fall back to offline mode
	async function checkReadLaterStatus() {
		try {
			// First check if we have a cached version
			const cachedState = getOfflineReadLaterState();

			try {
				const response = await fetch(`/api/readlater/${slug}`, {
					method: "GET",
					headers: { "Content-Type": "application/json" },
				});

				if (response.ok) {
					const data = await response.json();
					// Update button state based on server data
					updateState(data.isInReadLater);
					// Update authentication status
					btn?.setAttribute(
						"data-authenticated",
						data.isAuthenticated.toString()
					);
					// Update offline cache
					updateOfflineReadLaterState(data.isInReadLater);
				} else {
					// If API fails, use cached state
					updateState(cachedState);
				}
			} catch (error) {
				// Network error - offline mode
				console.log("Using offline mode for read later status");
				updateState(cachedState);
			}
		} finally {
			// Remove loading state
			btn?.removeAttribute("data-loading");
		}
	}

	if (btn) {
		// Check status when page loads
		checkReadLaterStatus();

		btn.addEventListener("click", async () => {
			const isAuthenticated = btn.dataset.authenticated === "true";
			if (!isAuthenticated) {
				// Close all other prompts first
				document.querySelectorAll("[data-prompt]").forEach((p) => {
					if (p.id !== "readLaterSignInPrompt") {
						p.classList.add("hidden");
					}
				});
				prompt?.classList.remove("hidden");
				return;
			}

			const wasSaved = check?.classList.contains("hidden") === false;
			// Start animation before API call
			if (!wasSaved) {
				btn?.classList.add("animate-pulse");
			}

			try {
				// Try online mode first
				try {
					const response = await fetch(`/api/readlater/${slug}`, {
						method: "POST",
						headers: {
							"Content-Type": "application/json",
						},
						body: JSON.stringify({ isActive: !wasSaved }),
					});

					if (response.ok) {
						updateState(!wasSaved);
						updateOfflineReadLaterState(!wasSaved);
					} else {
						throw new Error("API error");
					}
				} catch (error) {
					// Offline mode fallback
					console.log("Using offline mode for read later action");
					updateState(!wasSaved);
					updateOfflineReadLaterState(!wasSaved);
				}
			} finally {
				btn?.classList.remove("animate-pulse");
			}
		});

		// Handle sign-in prompt close button if prompt exists
		if (prompt) {
			const closeBtn = prompt.querySelector(".close-prompt");
			closeBtn?.addEventListener("click", () => {
				prompt.classList.add("hidden");
			});
		}
	}
</script>
