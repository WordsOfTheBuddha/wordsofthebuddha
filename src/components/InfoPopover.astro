---
interface Props {
	title?: string;
	description?: string;
	items?: string[];
}
const id = "qm-info";
const {
	title: helpTitle = "Explore the Quality Map",
	description:
		helpDesc = "Focus nodes, open details when you want, and use the explorer to search and filter.",
	items = [],
} = Astro.props as Props;
---

<button
	id={`${id}-btn`}
	class="qm-info-btn"
	aria-haspopup="dialog"
	aria-controls={`${id}-panel`}
	aria-expanded="false"
	title="How to use this map"
>
	i
</button>

<div
	id={`${id}-panel`}
	class="qm-info-panel"
	role="dialog"
	aria-modal="false"
	aria-labelledby={`${id}-title`}
	hidden
>
	<div class="qm-info-content" tabindex="-1">
		<h3 id={`${id}-title`}>{helpTitle}</h3>
		<p>{helpDesc}</p>

		{
			items && items.length > 0 && (
				<ul class="qm-info-list">
					{items.map((it: string) => (
						<li set:html={it} />
					))}
				</ul>
			)
		}

		<button class="qm-info-close" aria-label="Close">Close</button>
	</div>
</div>

<style>
	.qm-info-btn {
		position: absolute;
		top: 8px;
		right: 8px;
		z-index: 6; /* same layer as vp-toggle */
		width: 28px;
		height: 28px;
		display: grid;
		place-items: center;
		border-radius: 999px;
		border: 1px solid var(--border-color);
		background: var(--background-color);
		color: var(--text-color);
		font:
			700 14px/1 system-ui,
			-apple-system,
			Segoe UI,
			Roboto,
			sans-serif;
		cursor: pointer;
	}
	.qm-info-panel[hidden] {
		display: none;
	}
	.qm-info-panel {
		position: absolute;
		top: 44px;
		right: 8px;
		z-index: 7;
		max-width: min(92vw, 380px);
	}
	.qm-info-content {
		outline: none;
		background: var(--background-color);
		color: var(--text-color);
		border: 1px solid var(--border-color);
		border-radius: 10px;
		padding: 12px 12px 10px 12px;
		box-shadow: 0 10px 28px rgba(0, 0, 0, 0.12);
	}
	.qm-info-content h3 {
		margin: 0 0 6px 0;
		font:
			700 14px/1.2 system-ui,
			-apple-system,
			Segoe UI,
			Roboto,
			sans-serif;
	}
	.qm-info-content p {
		margin: 0 0 8px 0;
		font:
			400 13px/1.3 system-ui,
			-apple-system,
			Segoe UI,
			Roboto,
			sans-serif;
		opacity: 0.92;
	}
	.qm-info-list {
		margin: 0 0 8px 16px;
		padding: 0;
		font:
			400 13px/1.35 system-ui,
			-apple-system,
			Segoe UI,
			Roboto,
			sans-serif;
	}
	.qm-info-list li {
		margin: 0 0 6px 0;
	}
	.qm-info-content kbd {
		display: inline-block;
		padding: 1px 4px;
		border: 1px solid var(--border-color);
		border-bottom-width: 2px;
		border-radius: 4px;
		font:
			600 11px/1 system-ui,
			-apple-system,
			Segoe UI,
			Roboto,
			sans-serif;
	}
	.qm-info-close {
		display: inline-block;
		margin-top: 6px;
		padding: 4px 8px;
		border-radius: 6px;
		border: 1px solid var(--border-color);
		background: var(--background-color);
		color: var(--text-color);
		font:
			600 12px/1 system-ui,
			-apple-system,
			Segoe UI,
			Roboto,
			sans-serif;
		cursor: pointer;
	}
	@media (hover: hover) {
		.qm-info-btn:hover {
			filter: brightness(1.05);
		}
		.qm-info-close:hover {
			filter: brightness(1.05);
		}
	}
</style>

<script>
	const btn = document.getElementById(`${"qm-info"}-btn`);
	const panel = document.getElementById(`${"qm-info"}-panel`);
	const content = panel?.querySelector(
		".qm-info-content"
	) as HTMLElement | null;
	const closeBtn = panel?.querySelector(".qm-info-close");

	function open() {
		if (!panel) return;
		panel.hidden = false;
		btn?.setAttribute("aria-expanded", "true");
		setTimeout(() => content?.focus(), 0);
		document.addEventListener("keydown", onKeydown, true);
		document.addEventListener("click", onDocClick, true);
	}
	function close() {
		if (!panel) return;
		panel.hidden = true;
		btn?.setAttribute("aria-expanded", "false");
		document.removeEventListener("keydown", onKeydown, true);
		document.removeEventListener("click", onDocClick, true);
		btn?.focus();
	}
	function onKeydown(e: KeyboardEvent) {
		if (e.key === "Escape") {
			e.stopPropagation();
			e.preventDefault();
			close();
		}
	}
	function onDocClick(e: MouseEvent) {
		if (!panel) return;
		const target = e.target as Node | null;
		if ((target && panel.contains(target)) || e.target === btn) return;
		close();
	}

	btn?.addEventListener("click", () => {
		if (panel?.hidden) open();
		else close();
	});
	closeBtn?.addEventListener("click", close);
</script>
