---
import Layout from "./Layout.astro";
import PostCard from "../components/PostCard.astro";
import { performSearch, type SearchResult } from "../service/search/search";
import type { DirectoryStructure } from "../types/directory";
import { directoryStructureWithCounts } from "../data/directoryStructureWithCounts";
import ScrollToTop from "../components/ScrollToTop.astro";

interface Props {
	title: string;
	description: string;
	searchPattern: string;
	collection?: boolean;
	children?: Record<string, DirectoryStructure>;
}

const {
	title,
	description,
	searchPattern,
	collection = false,
	children,
} = Astro.props;

const pagePosts: SearchResult[] = await performSearch(searchPattern, {
	highlight: true,
});

const hasChildren = children && Object.keys(children).length > 0;
// Build-time default; client JS will honor ?view=…
const defaultShowCollections =
	hasChildren && Astro.url.searchParams.get("view") !== "discourses";

// Dev-time debug: log render context (collection view vs discourses view)
if (import.meta.env?.DEV) {
	console.log("[CollectionLayout] rendering", {
		path: Astro.url.pathname,
		hasChildren,
		searchPattern,
		posts: pagePosts.length,
		childCollections: hasChildren ? Object.keys(children || {}).length : 0,
		defaultShowCollections,
	});
}

// Function to find content count for a specific slug
function getContentCount(slug: string): number {
	const currentPath = Astro.url.pathname.replace(/\/$/, "");
	const pathParts = currentPath.split("/").filter(Boolean);

	if (directoryStructureWithCounts[slug]?.contentCount !== undefined) {
		return directoryStructureWithCounts[slug].contentCount;
	}

	if (pathParts.length === 1) {
		const parentKey = Object.keys(directoryStructureWithCounts).find(
			(key) => directoryStructureWithCounts[key]?.children?.[pathParts[0]]
		);

		if (parentKey) {
			const currentPathCollection =
				directoryStructureWithCounts[parentKey]?.children?.[
					pathParts[0]
				];
			if (
				currentPathCollection?.children?.[slug]?.contentCount !==
				undefined
			) {
				return currentPathCollection.children[slug].contentCount;
			}
		}
	}

	if (
		pathParts.length === 1 &&
		directoryStructureWithCounts[pathParts[0]]?.children
	) {
		const parent = directoryStructureWithCounts[pathParts[0]];
		if (
			parent.children &&
			parent.children[slug]?.contentCount !== undefined
		) {
			return parent.children[slug].contentCount;
		}
	}

	if (children && (children as any)[slug]?.contentCount !== undefined) {
		return (children as any)[slug].contentCount as number;
	}

	return 0;
}
---

<Layout
	title={title}
	description={description}
	showAuth={true}
	showFilter={!hasChildren}
>
	<main class="container">
		{
			hasChildren && (
				<div class="flex justify-between items-center mb-6">
					<div class="inline-flex rounded-full border border-[var(--border-color)] p-1 bg-[var(--surface-paper)]">
						<button
							type="button"
							id="view-collections"
							class={[
								"px-4 py-1 text-sm rounded-full transition-colors",
								defaultShowCollections
									? "bg-primary text-white dark:text-gray-100"
									: "text-[var(--text-muted)] hover:text-[var(--text-color)]",
							].join(" ")}
						>
							Collections
						</button>
						<button
							type="button"
							id="view-discourses"
							class={[
								"px-4 py-1 text-sm rounded-full transition-colors",
								!defaultShowCollections
									? "bg-primary text-white dark:text-gray-100"
									: "text-[var(--text-muted)] hover:text-[var(--text-color)]",
							].join(" ")}
						>
							Discourses
						</button>
					</div>
					<div
						id="filter-wrap"
						class={[
							"flex items-center gap-3",
							defaultShowCollections ? "hidden" : "",
						].join(" ")}
					>
						<div class="relative">
							<input
								type="text"
								id="client-filter"
								class="w-28 sm:w-48 px-2 py-1 text-sm bg-transparent border-b border-[color:rgba(44,44,44,0.15)] dark:border-[color:rgba(231,220,196,0.25)] focus:outline-none focus:border-[var(--primary-color)]"
								placeholder="Filter discourses..."
							/>
						</div>
					</div>
				</div>
			)
		}

		{/* Render both; client toggles based on ?view=… */}
		{
			hasChildren && (
				<div
					id="collections-grid"
					class={[
						"posts-grid",
						defaultShowCollections ? "" : "hidden",
					].join(" ")}
				>
					{(
						Object.entries(children || {}) as [
							string,
							DirectoryStructure,
						][]
					).map(([slug, data]) => (
						<PostCard
							title={data.title}
							description={data.description || ""}
							id={slug}
							clamp={5}
							count={getContentCount(slug)}
						/>
					))}
				</div>
			)
		}

		<div
			id="discourses-grid"
			class={[
				"posts-grid",
				hasChildren && defaultShowCollections ? "hidden" : "",
			].join(" ")}
		>
			{
				pagePosts.map((post) => (
					<PostCard
						title={post.title}
						description={post.description}
						id={post.slug}
						clamp={4}
					/>
				))
			}
		</div>
	</main>

	<ScrollToTop />
</Layout>

<style>
	.bg-primary {
		background-color: var(--primary-color);
	}
	.hidden {
		display: none;
	}
	.active-tab {
		background-color: var(--primary-color);
		color: white;
	}
</style>

<script>
	const params = new URLSearchParams(window.location.search);
	const view = params.get("view");
	const hasChildren = !!document.getElementById("collections-grid");
	const collectionsGrid = document.getElementById("collections-grid");
	const discoursesGrid = document.getElementById("discourses-grid");
	const filterWrap = document.getElementById("filter-wrap");
	const btnCollections = document.getElementById("view-collections");
	const btnDiscourses = document.getElementById("view-discourses");

	function setView(mode: string) {
		const showCollections = hasChildren && mode !== "discourses";
		// Batch DOM changes to next frame to reduce flicker
		requestAnimationFrame(() => {
			if (collectionsGrid)
				collectionsGrid.classList.toggle("hidden", !showCollections);
			if (discoursesGrid)
				discoursesGrid.classList.toggle("hidden", showCollections);
			if (filterWrap)
				filterWrap.classList.toggle("hidden", showCollections);
			if (btnCollections && btnDiscourses) {
				btnCollections.classList.toggle("bg-primary", showCollections);
				btnCollections.classList.toggle("text-white", showCollections);
				btnDiscourses.classList.toggle("bg-primary", !showCollections);
				btnDiscourses.classList.toggle("text-white", !showCollections);
			}
		});
	}

	// Initial
	if (view) setView(view);

	// Enhance tabs to toggle without full reload
	btnCollections?.addEventListener("click", () => {
		setView("collections");
		const url = new URL(window.location.href);
		url.searchParams.set("view", "collections");
		// Defer URL update slightly to avoid layout paint race
		setTimeout(() => window.history.replaceState({}, "", url), 0);
	});
	btnDiscourses?.addEventListener("click", () => {
		setView("discourses");
		const url = new URL(window.location.href);
		url.searchParams.set("view", "discourses");
		setTimeout(() => window.history.replaceState({}, "", url), 0);
	});

	// Client-side filter for discourses list
	const input = document.getElementById("client-filter") as HTMLInputElement;
	const posts = discoursesGrid?.querySelectorAll(".post-item");
	input?.addEventListener("input", (e) => {
		const filter = (e.target as HTMLInputElement).value
			.toLowerCase()
			.normalize("NFD")
			.replace(/[\u0300-\u036f]/g, "");
		posts?.forEach((post) => {
			const aTag = post.querySelector("a");
			const hrefValue = aTag?.getAttribute("href")?.toLowerCase() || "";
			const content =
				post.textContent
					?.toLowerCase()
					.normalize("NFD")
					.replace(/[\u0300-\u036f]/g, "") || "";
			const combinedContent = `${hrefValue} ${content}`;
			post.classList.toggle(
				"hidden",
				!!filter && !combinedContent.includes(filter)
			);
		});
	});
</script>
