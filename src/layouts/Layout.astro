---
import Analytics from "@vercel/analytics/astro";
import SpeedInsights from "@vercel/speed-insights/astro";
// Add content styling with CSS classes
import "../styles/global.css";
import Navbar from "../components/Navbar.astro";
import Breadcrumbs from "../components/Breadcrumbs.astro";
import LastUpdated from "../components/LastUpdated.astro";
import Footer from "../components/Footer.astro";
import Tooltip from "../components/Tooltip.astro";
import "../styles/content.css";
import Title from "../components/Title.astro";
import Description from "../components/Description.astro";
import FooterNavigation from "../components/FooterNavigation.astro";
import HighlightLayout from "../components/HighlightLayout.astro";
import ReadLaterButton from "../components/ReadLaterButton.astro";
import SaveButton from "../components/SaveButton.astro";
import PaliButton from "../components/PaliButton.astro";

const paramTheme = Astro.url.searchParams.get("theme");
// Server-side theme is always dark initially
const serverTheme = paramTheme === "light" ? "light" : "dark";

const {
	id,
	fp,
	title,
	description,
	prev,
	next,
	lastUpdated,
	showReadLater = false,
	showSave = false,
	titleIcon = null, // Add new prop for title icon
	showAuth = false, // Add new prop
	showPali = false,
} = Astro.props;
let SEOTitle = title;
if (title != "Words of the Buddha" && title) {
	SEOTitle = title + " - Words of the Buddha";
}
if (id) {
	SEOTitle = id.replace(/([A-Za-z]+)(\d)/, "$1 $2").toUpperCase() + " " + title;
}
---

<html lang="en" class={serverTheme} dir="ltr">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>{SEOTitle || "Words of the Buddha"}</title>
		<meta name="description" content={description || "Default Description"} />
		<link rel="icon" type="image/x-icon" href="/favicon.ico" />
		<script is:inline>
			function getInitialTheme() {
				const storedTheme = localStorage.getItem("theme");
				const urlParams = new URLSearchParams(window.location.search);
				const paliMode = urlParams.get("pli") === "true";
				localStorage.setItem("paliMode", paliMode);
				const paliLookup = urlParams.get("enablePaliLookup");
				if (paliLookup) {
					localStorage.setItem("paliLookup", paliLookup === "true");
				} else if (!localStorage.getItem("paliLookup")) {
					localStorage.setItem("paliLookup", true);
				}

				const paramTheme = urlParams.get("theme");

				if (paramTheme === "light" || paramTheme === "dark") {
					return paramTheme;
				}

				if (storedTheme === "light" || storedTheme === "dark") {
					return storedTheme;
				}

				return window.matchMedia("(prefers-color-scheme: dark)").matches
					? "dark"
					: "light";
			}

			document.documentElement.classList.remove("light", "dark");
			document.documentElement.classList.add(getInitialTheme());
		</script>
	</head>
	<body class="bg-white dark:bg-gray-900 text-gray-900 dark:text-gray-100">
		<Analytics />
		<SpeedInsights />
		<Tooltip />
		<main class="p-4">
			<div class="max-w-4xl mx-auto prose prose-lg dark:prose-invert">
				<HighlightLayout currentPath={fp}>
					<Navbar showAuth={showAuth} />
					<Breadcrumbs path={fp || Astro.url.pathname} />
					<Title title={title}>
						{
							titleIcon && (
								<span
									class="inline-block w-4 h-4 mr-2 -mt-1 text-primary-color dark:text-primary-color"
									set:html={titleIcon}
								/>
							)
						}
					</Title>
					<Description description={description} />
					{
						(showPali || showReadLater || showSave) && (
							<>
								<div class="flex items-center justify-between gap-1">
									{showPali && <PaliButton />}
									<div class="flex items-center gap-1">
										{showReadLater && <ReadLaterButton />}
										{showSave && <SaveButton />}
									</div>
								</div>
								<hr class="mt-2 mb-8" />
							</>
						)
					}
					<slot />
					{lastUpdated && <LastUpdated lastUpdated={lastUpdated} path={fp} />}
					<FooterNavigation prev={prev} next={next} />
					<Footer />
				</HighlightLayout>
			</div>
		</main>
	</body>
	<script>
		import { handleNavigation, synchronizePreferences } from "../utils/theme";
		import type { UserPreferences, Theme, FontSize } from "../utils/theme";

		// Load preferences once when the page loads
		document.addEventListener("DOMContentLoaded", async () => {
			const urlParams = new URLSearchParams(window.location.search);
			const preferences: UserPreferences = {
				theme:
					(urlParams.get("theme") as Theme) ?? localStorage.theme ?? "dark",
				showPali: urlParams.get("pli") === "true",
				enablePaliLookup:
					urlParams.get("enablePaliLookup") ?? localStorage.paliLookup ?? false,
			};
			console.log("preferences: ", preferences);
			synchronizePreferences(preferences);
			// Apply font size from localStorage
			const storedFontSize = localStorage.getItem("fontSize") || "large";
			const prose = document.querySelector("article.prose");
			if (prose && storedFontSize === "larger") {
				prose.classList.remove("prose-lg", "prose-xl");
				prose.classList.add("prose-xl");
			}

			// Add click handler for all navigation
			document.addEventListener("click", handleNavigation);

			// Remove empty spans after preferences are applied
			document.querySelectorAll("span").forEach((span) => {
				const hasVisibleContent = /\S/.test(span.textContent ?? "");
				const hasMeaningfulAttributes = span.attributes.length > 0;

				if (!hasVisibleContent && !hasMeaningfulAttributes) {
					span.remove();
				}
			});
		});
	</script>
</html>
