---
import Analytics from "@vercel/analytics/astro";
import SpeedInsights from "@vercel/speed-insights/astro";
// Add content styling with CSS classes
import "../styles/global.css";
import Navbar from "../components/Navbar.astro";
import Breadcrumbs from "../components/Breadcrumbs.astro";
import LastUpdated from "../components/LastUpdated.astro";
import Footer from "../components/Footer.astro";
import Collapse from "../components/Collapse.astro";
import Tooltip from "../components/Tooltip.astro";
import PrintFormatter from "../components/PrintFormatter.astro";
import "../styles/content.css";
import Title from "../components/Title.astro";
import Description from "../components/Description.astro";
import FooterNavigation from "../components/FooterNavigation.astro";
import HighlightLayout from "../components/HighlightLayout.astro";
import ReadLaterButton from "../components/ReadLaterButton.astro";
import SaveButton from "../components/SaveButton.astro";
import ReadButton from "../components/ReadButton.astro";
import PaliButton from "../components/PaliButton.astro";
import PaliLayoutToggle from "../components/PaliLayoutToggle.astro";
import ScrollToTop from "../components/ScrollToTop.astro";
import QualityTags from "../components/QualityTags.astro";

const paramTheme = Astro.url.searchParams.get("theme");
// Server-side theme is always dark initially
const serverTheme = paramTheme === "light" ? "light" : "dark";

const {
	id,
	fp,
	title,
	description,
	qualities,
	prev,
	next,
	lastUpdated,
	showReadLater = false,
	showSave = false,
	showRead = false,
	titleIcon = null,
	showAuth = false,
	showPali = false,
	showFilter = false,
	seoTitle = null, // Add new prop for SEO title
} = Astro.props;

console.log("title is: ", title, " fp: ", fp);
console.log("qualities are: ", qualities);
let SEOTitle = seoTitle;
if (!SEOTitle) {
	if (title != "Words of the Buddha" && title) {
		SEOTitle = title + " - Words of the Buddha";
	}
	if (id && fp.includes("anthologies")) {
		SEOTitle = "Anthology - " + title;
	} else if (id) {
		SEOTitle =
			id.replace(/([A-Za-z]+)(\d)/, "$1 $2").toUpperCase() + " " + title;
	}
}
---

<html lang="en" class={serverTheme} dir="ltr">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />

		<!-- Preload critical fonts -->
		<link
			rel="preload"
			href="/assets/fonts/Spectral-Regular.woff2"
			as="font"
			type="font/woff2"
			crossorigin
		/>
		<link
			rel="preload"
			href="/assets/fonts/Spectral-Italic.woff2"
			as="font"
			type="font/woff2"
			crossorigin
		/>
		<link
			rel="preload"
			href="/assets/fonts/GentiumPlus-Regular.ttf"
			as="font"
			type="font/ttf"
			crossorigin="anonymous"
		/>

		<title>{SEOTitle || "Words of the Buddha"}</title>
		<meta
			name="description"
			content={description || "Default Description"}
		/>
		<link rel="icon" type="image/x-icon" href="/favicon.ico" />
		<script is:inline>
			function getInitialTheme() {
				const storedTheme = localStorage.getItem("theme");
				const urlParams = new URLSearchParams(window.location.search);
				const paliMode = urlParams.get("pli") === "true";
				localStorage.setItem("paliMode", paliMode);
				const paliLookup = urlParams.get("enablePaliLookup");
				if (paliLookup) {
					localStorage.setItem("paliLookup", paliLookup === "true");
				} else if (!localStorage.getItem("paliLookup")) {
					localStorage.setItem("paliLookup", true);
				}

				const paramTheme = urlParams.get("theme");

				if (paramTheme === "light" || paramTheme === "dark") {
					return paramTheme;
				}

				if (storedTheme === "light" || storedTheme === "dark") {
					return storedTheme;
				}

				return window.matchMedia("(prefers-color-scheme: dark)").matches
					? "dark"
					: "light";
			}

			document.documentElement.classList.remove("light", "dark");
			const theme = getInitialTheme();
			document.documentElement.classList.add(theme);
			localStorage.setItem("theme", theme);
		</script>
	</head>
	<body class="bg-white dark:bg-gray-900 text-gray-900 dark:text-gray-100">
		<Analytics />
		<SpeedInsights />
		<Tooltip />
		<PrintFormatter />
		<main class="p-4">
			<div class="max-w-4xl mx-auto prose prose-lg dark:prose-invert">
				<HighlightLayout
					currentPath={fp}
					title={title}
					description={description}
				>
					<Navbar showAuth={showAuth} />
					<Breadcrumbs path={fp || Astro.url.pathname} />
					{(<Description description={description} />)}
					{
						(showPali || showReadLater || showSave) && (
							<>
								<div class="flex items-center justify-between gap-1">
									{showPali && (
										<div class="flex items-center gap-1">
											<PaliButton />
											<PaliLayoutToggle />
										</div>
									)}
									<div class="flex items-center gap-1">
										{showReadLater && <ReadLaterButton />}
										{showSave && <SaveButton />}
									</div>
								</div>
							</>
						)
					}
					<div class="flex items-start justify-between">
						<Title title={title} showFilter={showFilter}>
							{
								titleIcon && (
									<span
										class="inline-block w-4 h-4 mr-2 -mt-1 text-primary-color dark:text-primary-color"
										set:html={titleIcon}
									/>
								)
							}
						</Title>
					</div>
					<Collapse defaultState="collapse" />
					<slot />
					{
						showRead && (
							<div class="flex justify-end mt-6 mb-4">
								<ReadButton />
							</div>
						)
					}
					{
						qualities && qualities.length > 0 && (
							<QualityTags tags={qualities} />
						)
					}
					{
						lastUpdated && (
							<LastUpdated lastUpdated={lastUpdated} path={fp} />
						)
					}
					<FooterNavigation prev={prev} next={next} />
					<Footer />
				</HighlightLayout>
			</div>
		</main>
		<ScrollToTop />
	</body>
	<script>
		import {
			handleNavigation,
			synchronizePreferences,
		} from "../utils/theme";
		import type { UserPreferences, Theme, FontSize } from "../utils/theme";

		// Load preferences once when the page loads
		document.addEventListener("DOMContentLoaded", async () => {
			const urlParams = new URLSearchParams(window.location.search);
			const preferences: UserPreferences = {
				theme:
					(urlParams.get("theme") as Theme) ??
					localStorage.theme ??
					"dark",
				showPali: urlParams.get("pli") === "true",
				enablePaliLookup:
					urlParams.get("enablePaliLookup") ??
					localStorage.paliLookup ??
					false,
			};
			preferences.layout = preferences.showPali
				? window.innerWidth < 768
					? "interleaved"
					: ((urlParams.get("layout") as "split" | "interleaved") ??
						localStorage.layout ??
						"interleaved")
				: undefined;
			console.log("preferences: ", preferences);
			synchronizePreferences(preferences);
			// Apply font size from localStorage
			const storedFontSize = localStorage.getItem("fontSize") || "large";
			const proseElements = document.querySelectorAll("article.prose");
			if (proseElements && storedFontSize === "larger") {
				proseElements.forEach((prose) => {
					prose.classList.remove("prose-lg", "prose-xl");
					prose.classList.add("prose-xl");
				});
			}

			// Add click handler for all navigation
			document.addEventListener("click", handleNavigation);

			// Remove empty spans after preferences are applied
			document.querySelectorAll("span").forEach((span) => {
				const hasVisibleContent = /\S/.test(span.textContent ?? "");
				const hasMeaningfulAttributes = span.attributes.length > 0;

				if (!hasVisibleContent && !hasMeaningfulAttributes) {
					span.remove();
				}
			});
		});
	</script>
</html>
