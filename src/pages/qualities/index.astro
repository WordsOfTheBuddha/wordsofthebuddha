---
import Layout from "../../layouts/Layout.astro";
import qualityMappings from "../../data/qualityMappings.json";
import qualities from "../../data/qualities.json";

// Ensure this page is server-rendered
export const prerender = false;

// Group qualities by first letter with TypeScript type annotations
function groupByFirstLetter(items: string[]): Record<string, string[]> {
	const groups: Record<string, string[]> = {};

	items.forEach((item) => {
		const firstLetter = item.charAt(0).toUpperCase();
		if (!groups[firstLetter]) {
			groups[firstLetter] = [];
		}
		groups[firstLetter].push(item);
	});

	return groups;
}

// Get all available first letters
const alphabet = "ABCDEFGHIJKLMNOPQRSTUVW".split("");
const positiveByLetter = groupByFirstLetter(qualities.positive);
const negativeByLetter = groupByFirstLetter(qualities.negative);
const neutralByLetter = groupByFirstLetter(qualities.neutral);
---

<Layout seoTitle="Mental Qualities - Words of the Buddha" showAuth={true}>
	<main class="container mx-auto px-4 py-8">
		<div class="flex justify-between items-baseline mb-4 border-b pb-2">
			<h3 class="text-2xl font-bold flex-grow mr-4">
				Discover Discourses by Qualities
			</h3>
			<div class="relative">
				<input
					type="text"
					id="quality-filter"
					class="w-28 sm:w-48 px-2 py-1 text-sm bg-transparent border-b border-gray-300 dark:border-gray-700 focus:outline-none focus:border-primary-color dark:focus:border-primary-color"
					placeholder="Filter qualities..."
				/>
			</div>
		</div>
		<!-- A-Z Index -->
		<div class="mb-8 flex flex-wrap gap-2">
			{
				alphabet.map((letter) => {
					const hasQualities =
						(positiveByLetter[letter] &&
							positiveByLetter[letter].length > 0) ||
						(negativeByLetter[letter] &&
							negativeByLetter[letter].length > 0) ||
						(neutralByLetter[letter] &&
							neutralByLetter[letter].length > 0);

					return (
						<a
							href={hasQualities ? `#${letter}` : "#"}
							class={`w-8 h-8 flex items-center justify-center rounded-md transition-colors ${
								hasQualities
									? "text-[var(--primary-color)] hover:opacity-80 border border-[var(--primary-color)]"
									: "text-gray-400 dark:text-gray-500 border border-gray-200 dark:border-gray-700 cursor-default"
							}`}
						>
							{letter}
						</a>
					);
				})
			}
		</div>

		<!-- Quality listings -->
		<div class="space-y-8">
			{
				alphabet.map((letter) => {
					let qualitiesForLetter = [
						...(positiveByLetter[letter] || []),
						...(negativeByLetter[letter] || []),
						...(neutralByLetter[letter] || []),
					];

					if (qualitiesForLetter.length === 0) return null;

					return (
						<div id={letter} class="scroll-mt-16 letter-section">
							<h2 class="text-2xl font-bold mb-4 border-b pb-2">
								{letter}
							</h2>
							<div class="space-y-4">
								{qualitiesForLetter.sort().map((quality) => {
									// Explicitly type synonymsList as array of strings or arrays of strings
									const synonymsList: (string | string[])[] =
										qualities.synonyms[
											quality as keyof typeof qualities.synonyms
										] || [];
									const discourses =
										qualityMappings[
											quality as keyof typeof qualityMappings
										] || [];
									const isPositive =
										qualities.positive.includes(quality);
									const isNegative =
										qualities.negative.includes(quality);
									const displayName =
										quality.charAt(0).toUpperCase() +
										quality.slice(1);

									return (
										<div class="post-item relative flex flex-col w-full p-5 mt-6 rounded-lg bg-white dark:bg-gray-800 text-gray-800 dark:text-gray-200 transition-shadow duration-200 shadow-md dark:shadow-[0_0_10px_rgba(255,255,255,0.1)] hover:shadow-lg dark:hover:shadow-[0_0_15px_rgba(255,255,255,0.2)]">
											<div class="flex items-start justify-between">
												<div class="flex items-start flex-grow">
													<div class="min-w-0 pr-4">
														<h3 class="text-base sm:text-lg font-semibold flex items-center flex-wrap">
															<a
																href={`/qualities/${quality}`}
																class="post-link hover:text-link-color id font-normal"
															>
																{displayName}
															</a>
															{isPositive && (
																<span
																	class="ml-2 px-2 py-0.5 text-xs rounded-full border-2 border-amber-400 text-amber-600 dark:text-amber-400 cursor-help tooltip"
																	data-tooltip="When a bright quality is cultivated, it brings benefit, clarity of vision, and the growth of wisdom."
																>
																	‚òÄÔ∏è bright
																</span>
															)}
															{isNegative && (
																<span
																	class="ml-2 px-2 py-0.5 text-xs rounded-full border-2 border-slate-500 text-slate-600 dark:text-slate-400 cursor-help tooltip"
																	data-tooltip="When a dark quality is maintained or not abandoned, it brings harm, obscured vision, and the decline of wisdom."
																>
																	‚òÅÔ∏è dark
																</span>
															)}
															{!isPositive &&
																!isNegative && (
																	<span
																		class="ml-2 px-2 py-0.5 text-xs rounded-full border-2 border-cyan-400 text-cyan-600 dark:text-cyan-400 cursor-help tooltip"
																		data-tooltip="This quality can be either skillful or unskillful depending on how it is applied and the context in which it arises."
																	>
																		üí†
																		neutral
																	</span>
																)}
														</h3>
													</div>
												</div>
												<div class="shrink-0 self-start">
													<span class="px-2 py-0.5 rounded-md text-xs font-medium text-white bg-[var(--primary-color)] shadow-sm">
														{discourses.length}
													</span>
												</div>
											</div>
											{synonymsList.length > 0 && (
												<div class="mt-6 grid grid-cols-[auto_1fr] gap-y-2 gap-x-4 text-sm">
													{/* Non-PƒÅli terms */}
													{synonymsList.some(
														(
															term
														): term is string =>
															typeof term ===
																"string" &&
															!term.startsWith(
																"["
															) &&
															!term.startsWith(
																"Context:"
															) &&
															!term.startsWith(
																"Related:"
															)
													) && (
														<>
															<span class="text-gray-500 dark:text-gray-400 pr-4">
																Synonyms:
															</span>
															<span class="text-text">
																{synonymsList
																	.filter(
																		(
																			term
																		): term is string =>
																			typeof term ===
																				"string" &&
																			!term.startsWith(
																				"["
																			) &&
																			!term.startsWith(
																				"Context:"
																			) &&
																			!term.startsWith(
																				"Related:"
																			)
																	)
																	.join(", ")}
															</span>
														</>
													)}

													{/* Context information */}
													{synonymsList.some(
														(
															term
														): term is string =>
															typeof term ===
																"string" &&
															term.startsWith(
																"Context:"
															)
													) && (
														<>
															<span class="text-gray-500 dark:text-gray-400 pr-4">
																Context:
															</span>
															<span class="text-text italic">
																{synonymsList
																	.find(
																		(
																			term
																		): term is string =>
																			typeof term ===
																				"string" &&
																			term.startsWith(
																				"Context:"
																			)
																	)
																	?.replace(
																		"Context: ",
																		""
																	)}
															</span>
														</>
													)}

													{/* PƒÅli terms */}
													{synonymsList.some(
														(
															term
														): term is string =>
															typeof term ===
																"string" &&
															term.startsWith("[")
													) && (
														<>
															<span class="text-gray-500 dark:text-gray-400 pr-4">
																PƒÅli term:
															</span>
															<span class="pali-paragraph font-semibold text-text">
																{synonymsList
																	.filter(
																		(
																			term
																		): term is string =>
																			typeof term ===
																				"string" &&
																			term.startsWith(
																				"["
																			)
																	)
																	.map(
																		(
																			term
																		) =>
																			term.replace(
																				/[\[\]]/g,
																				""
																			)
																	)
																	.join(", ")}
															</span>
														</>
													)}

													{/* Related qualities */}
													{synonymsList.some(
														(
															term
														): term is string =>
															typeof term ===
																"string" &&
															term.startsWith(
																"Related:"
															)
													) && (
														<>
															<span class="text-gray-500 dark:text-gray-400 self-center">
																Related
																Qualities:
															</span>
															<div class="flex flex-wrap gap-2">
																{synonymsList
																	.find(
																		(
																			term
																		): term is string =>
																			typeof term ===
																				"string" &&
																			term.startsWith(
																				"Related:"
																			)
																	)
																	?.replace(
																		"Related:",
																		""
																	)
																	.replace(
																		/[{}]/g,
																		""
																	)
																	.split(",")
																	.map(
																		(
																			quality
																		) =>
																			quality.trim()
																	)
																	.sort()
																	.map(
																		(
																			relatedQuality
																		) => {
																			const qualitySlug =
																				encodeURIComponent(
																					relatedQuality.toLowerCase()
																				);
																			const capitalizedQuality =
																				relatedQuality
																					.charAt(
																						0
																					)
																					.toUpperCase() +
																				relatedQuality.slice(
																					1
																				);

																			// Determine quality type for styling
																			const isPositive =
																				qualities.positive.includes(
																					relatedQuality.toLowerCase()
																				);
																			const isNegative =
																				qualities.negative.includes(
																					relatedQuality.toLowerCase()
																				);

																			const tagClass =
																				isPositive
																					? "quality-tag positive"
																					: isNegative
																						? "quality-tag negative"
																						: "quality-tag neutral";

																			return (
																				<a
																					href={`/qualities/${qualitySlug}`}
																					class={
																						tagClass
																					}
																				>
																					{
																						capitalizedQuality
																					}
																				</a>
																			);
																		}
																	)}
															</div>
														</>
													)}
												</div>
											)}
										</div>
									);
								})}
							</div>
						</div>
					);
				})
			}
		</div>
	</main>
</Layout>

<script>
	// Smooth scrolling for anchor links
	document.querySelectorAll('a[href^="#"]').forEach((anchor) => {
		anchor.addEventListener("click", function (e) {
			const href = this.getAttribute("href");
			if (href === "#") return;

			e.preventDefault();
			const target = document.querySelector(href);
			if (target) {
				target.scrollIntoView({
					behavior: "smooth",
				});
			}
		});
	});

	// Quality filtering functionality
	const filterInput = document.getElementById(
		"quality-filter"
	) as HTMLInputElement;
	const qualityItems = document.querySelectorAll(".post-item");
	const letterSections = document.querySelectorAll(".letter-section");

	filterInput?.addEventListener("input", (e) => {
		const filter = (e.target as HTMLInputElement).value
			.toLowerCase()
			.normalize("NFD")
			.replace(/[\u0300-\u036f]/g, "");

		qualityItems.forEach((item) => {
			const content =
				item.textContent
					?.toLowerCase()
					.normalize("NFD")
					.replace(/[\u0300-\u036f]/g, "") || "";

			const isVisible = !filter || content.includes(filter);
			item.classList.toggle("hidden", !isVisible);
		});

		// Hide/show letter sections if all their qualities are hidden
		letterSections.forEach((section) => {
			const visibleQualities = section.querySelectorAll(
				".post-item:not(.hidden)"
			);
			section.classList.toggle("hidden", visibleQualities.length === 0);
		});
	});
</script>

<style>
	.tooltip {
		position: relative;
	}

	.tooltip:hover::after {
		content: attr(data-tooltip);
		position: absolute;
		left: 50%;
		transform: translateX(-50%);
		bottom: calc(100% + 5px);
		background: rgba(0, 0, 0, 0.8);
		color: white;
		padding: 0.5rem 1rem;
		border-radius: 0.25rem;
		font-size: 0.75rem;
		white-space: normal;
		width: max-content;
		max-width: 250px;
		z-index: 10;
		box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
	}

	.quality-tag {
		display: inline-block;
		padding: 0.25rem 0.5rem;
		border-radius: 0.25rem;
		font-size: 0.875rem;
		text-decoration: none;
		transition: all 0.2s ease;
	}

	.quality-tag.positive {
		background-color: rgba(245, 158, 11, 0.1); /* amber-500 with opacity */
		color: #d97706; /* amber-600 */
		border: 1px solid rgba(245, 158, 11, 0.2);
	}

	.quality-tag.negative {
		background-color: rgba(100, 116, 139, 0.1); /* slate-500 with opacity */
		color: #475569; /* slate-600 */
		border: 1px solid rgba(100, 116, 139, 0.2);
	}

	.quality-tag.neutral {
		background-color: rgba(34, 211, 238, 0.1); /* cyan-400 with opacity */
		color: #0891b2; /* cyan-600 */
		border: 1px solid rgba(34, 211, 238, 0.2);
	}

	html.dark .quality-tag.positive {
		background-color: rgba(245, 158, 11, 0.2);
		color: #fbbf24; /* amber-400 for better contrast in dark mode */
		border: 1px solid rgba(245, 158, 11, 0.3);
	}

	html.dark .quality-tag.negative {
		background-color: rgba(100, 116, 139, 0.2);
		color: #94a3b8; /* slate-400 for better contrast in dark mode */
		border: 1px solid rgba(100, 116, 139, 0.3);
	}

	html.dark .quality-tag.neutral {
		background-color: rgba(34, 211, 238, 0.2);
		color: #22d3ee; /* cyan-400 for better contrast in dark mode */
		border: 1px solid rgba(34, 211, 238, 0.3);
	}

	.quality-tag:hover {
		transform: translateY(-1px);
		box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
	}

	html.dark .quality-tag:hover {
		box-shadow: 0 2px 4px rgba(255, 255, 255, 0.1);
	}

	/* Hide letter sections that have no visible qualities */
	.letter-section.hidden {
		display: none;
	}
</style>
