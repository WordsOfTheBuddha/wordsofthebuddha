---
export const prerender = false;
import { getEntry } from "astro:content";
import { app, db } from "../firebase/server";
import { getAuth } from "firebase-admin/auth";
import Layout from "../layouts/Layout.astro";
import PostCard from "../components/PostCard.astro";
import ClockSolid from "../assets/clock-solid.svg?raw";
import SaveSolid from "../assets/save-solid.svg?raw";
import HighlightIcon from "../assets/highlight.svg?raw";
import type { Highlight } from "../types/notes";
import { transformId } from "../utils/transformId";

const auth = getAuth(app);

/* Check current session */
if (!Astro.cookies.has("__session")) {
	return Astro.redirect("/signin");
}

const sessionCookie = Astro.cookies.get("__session")?.value;
if (!sessionCookie) {
	return Astro.redirect("/signin");
}

const decodedCookie = await auth.verifySessionCookie(sessionCookie);
const user = await auth.getUser(decodedCookie.uid);

if (!user) {
	return Astro.redirect("/signin");
}

// Fetch highlights from API
const highlightsResponse = await fetch(
	`${Astro.url.origin}/api/highlights/list`,
	{
		headers: {
			cookie: `__session=${Astro.cookies.get("__session")?.value || ""}`,
		},
	}
);
const { highlights: validHighlights } = await highlightsResponse.json();

const readLaterRef = db
	.collection("users")
	.doc(user.uid)
	.collection("readLater");

const readLaterDocs = await readLaterRef.orderBy("addedAt", "desc").get();

const readLaterEntries = await Promise.all(
	readLaterDocs.docs.map(async (doc) => {
		try {
			const entry = await getEntry("all", doc.id); // doc.id is the slug
			return entry
				? {
						...entry,
						addedAt: doc.data().addedAt.toDate(),
						timestamp: doc.data().addedAt.toMillis(), // Add timestamp for sorting
					}
				: null;
		} catch {
			return null;
		}
	})
);

// Filter out null entries and sort by timestamp
const validReadLaterEntries = readLaterEntries
	.filter(Boolean)
	.sort((a, b) => b.timestamp - a.timestamp);

const savedRef = db.collection("users").doc(user.uid).collection("saves");

const savedDocs = await savedRef.orderBy("savedAt", "desc").get();

const savedEntries = await Promise.all(
	savedDocs.docs.map(async (doc) => {
		try {
			const entry = await getEntry("all", doc.id);
			return entry
				? {
						...entry,
						savedAt: doc.data().savedAt.toDate(),
						timestamp: doc.data().savedAt.toMillis(),
					}
				: null;
		} catch {
			return null;
		}
	})
);

const validSavedEntries = savedEntries
	.filter(Boolean)
	.sort((a, b) => b.timestamp - a.timestamp);
---

<Layout showAuth={true}>
	<div class="py-4 px-4 sm:px-6 lg:px-8">
		<div class="max-w-5xl mx-auto" id="dashboard-container">
			<div class="sticky top-0 bg-white dark:bg-gray-900 z-10 py-2">
				<nav class="-mb-px flex space-x-8" aria-label="Tabs">
					<a href="#highlights" class="tab-link active" data-tab="highlights">
						<span class="inline-flex text-base sm:text-lg items-center gap-2">
							<span class="w-5 h-5" set:html={HighlightIcon} />
							Highlights
						</span>
					</a>
					<a href="#readlater" class="tab-link" data-tab="readlater">
						<span class="inline-flex text-base sm:text-lg items-center gap-2">
							<span class="w-5 h-5" set:html={ClockSolid} />
							Read Later
						</span>
					</a>
					<a href="#saves" class="tab-link" data-tab="saves">
						<span class="inline-flex text-base sm:text-lg items-center gap-2">
							<span class="w-5 h-5" set:html={SaveSolid} />
							Saves
						</span>
					</a>
				</nav>
			</div>

			<div id="highlights" class="tab-content">
				<div class="mt-8 space-y-4">
					{
						validHighlights.length === 0 ? (
							<div class="text-center py-8 text-gray-500">
								<p>No highlights found.</p>
							</div>
						) : (
							validHighlights.map((highlight: Highlight) => (
								<div class="highlight-page">
									<div class="flex items-start">
										<div class="min-w-0 pr-4">
											<h2 class="text-base sm:text-lg font-semibold mb-2">
												<a
													href={highlight.slug}
													class="text-gray-500 hover:text-link-color"
												>
													{transformId(
														highlight.slug?.replace(/^\//, "").split("?")[0] ||
															""
													)}
													{highlight.title}
												</a>
											</h2>
											{highlight.description && (
												<p class="text-text line-clamp-2 text-sm">
													{highlight.description}
												</p>
											)}
										</div>
									</div>
									<div class="highlight-content">
										{Object.values(highlight.highlightSegments)
											.sort((a, b) => a.order - b.order)
											.map((segment) => (
												<Fragment set:html={segment.containerHTML} />
											))}
									</div>
									<p class="text-gray-500 text-xs my-0 text-right">
										Highlighted on {highlight.formattedDate}
									</p>
								</div>
							))
						)
					}
				</div>
			</div>

			<div id="readlater" class="tab-content hidden">
				<div class="mt-8">
					{
						validReadLaterEntries.length === 0 ? (
							<div class="text-center py-8 text-gray-500">
								<p>No discourses added for later reading.</p>
							</div>
						) : (
							<div class="space-y-4">
								{validReadLaterEntries.map((entry) => (
									<PostCard
										id={entry.data.slug}
										title={entry.data.title}
										description={entry.data.description}
										lastUpdated={entry.addedAt}
										dateLabel="Added on"
									/>
								))}
							</div>
						)
					}
				</div>
			</div>

			<div id="saves" class="tab-content hidden">
				<div class="mt-8">
					{
						validSavedEntries.length === 0 ? (
							<div class="text-center py-8 text-gray-500">
								<p>No posts saved yet.</p>
							</div>
						) : (
							<div class="space-y-4">
								{validSavedEntries.map((entry) => (
									<PostCard
										id={entry.data.slug}
										title={entry.data.title}
										description={entry.data.description}
										lastUpdated={entry.savedAt}
										dateLabel="Saved on"
									/>
								))}
							</div>
						)
					}
				</div>
			</div>
		</div>
	</div>
</Layout>

<style>
	.tab-link {
		@apply border-b-2 border-transparent px-1 pb-4 text-sm font-medium;
		color: var(--text-color);
		&:hover {
			border-color: var(--gray-400);
			color: var(--text-color);
		}
	}
	.tab-link.active {
		border-color: var(--secondary-color);
		color: var(--secondary-color);
	}

	.highlight-page {
		@apply relative flex flex-col w-full p-5 rounded-lg;
		@apply bg-white dark:bg-gray-800;
		@apply text-gray-800 dark:text-gray-200;
		@apply transition-all duration-200;
		@apply shadow-md dark:shadow-[0_0_10px_rgba(255,255,255,0.1)];
		@apply hover:shadow-lg dark:hover:shadow-[0_0_15px_rgba(255,255,255,0.2)];
		@apply opacity-50 hover:opacity-80;
		max-height: 400px;
		overflow-y: auto;
	}

	.highlight-content {
		@apply mt-4 space-y-4 overflow-y-auto text-sm;
		max-height: 300px;
	}

	.highlight-content mark {
		@apply bg-opacity-50;
	}

	.highlight-page h1 {
		@apply text-xl font-semibold mb-2;
	}

	.highlight-page a {
		color: var(--link-color);
		text-decoration: none;
		&:hover {
			color: var(--link-hover-color);
			text-decoration: underline;
		}
	}

	.highlight-date {
		@apply text-xs text-gray-500 dark:text-gray-400 my-0 text-right;
	}

	mark {
		@apply rounded px-0.5;
	}

	.highlight-yellow {
		@apply bg-yellow-200 bg-opacity-50;
	}
	.highlight-pink {
		@apply bg-pink-200 bg-opacity-50;
	}
	.highlight-green {
		@apply bg-green-200 bg-opacity-50;
	}
	.highlight-blue {
		@apply bg-blue-200 bg-opacity-50;
	}

	#dashboard-container {
		scroll-margin-top: 1rem;
	}
</style>

<script>
	const tabLinks = document.querySelectorAll(".tab-link");
	const tabContents = document.querySelectorAll(".tab-content");

	function showTab(tabId: string) {
		tabContents.forEach((content) => content.classList.add("hidden"));
		tabLinks.forEach((link) => link.classList.remove("active"));

		const targetContent = document.getElementById(tabId);
		const targetLink = document.querySelector(`[data-tab="${tabId}"]`);

		targetContent?.classList.remove("hidden");
		targetLink?.classList.add("active");

		// Scroll dashboard into view smoothly
		document.getElementById("dashboard-container")?.scrollIntoView({
			behavior: "smooth",
			block: "start",
		});
	}

	tabLinks.forEach((link) => {
		link.addEventListener("click", (e) => {
			e.preventDefault();
			const tabId = link.getAttribute("data-tab") || "highlights";
			showTab(tabId);
			history.pushState(null, "", `#${tabId}`);
		});
	});

	// Handle initial load and back/forward navigation
	window.addEventListener("load", () => {
		const hash = window.location.hash.slice(1) || "highlights";
		showTab(hash);
	});

	window.addEventListener("hashchange", () => {
		const hash = window.location.hash.slice(1) || "highlights";
		showTab(hash);
	});
</script>
