---
export const prerender = false;
import Layout from "../layouts/Layout.astro";
import { app, db } from "../firebase/server";
import { getAuth } from "firebase-admin/auth";
import type { UserRecord, DecodedIdToken } from "firebase-admin/auth";
import FontSizeLarger from "../assets/font-size-larger.svg?raw";
import FontSizeLarge from "../assets/font-size-large.svg?raw";

// Initialize variables outside try/catch
let user: UserRecord | null = null;
let paliEnabled = false;
let currentTheme = "dark";
let currentFontSize = "large";
let paliLookup = true;

const auth = getAuth(app);

// Add debug logging
console.log("[Profile] Checking auth state");
console.log("[Profile] Has session cookie:", Astro.cookies.has("__session"));

try {
	// Check for session cookie
	if (!Astro.cookies.has("__session")) {
		console.log("[Profile] No session cookie found, redirecting to signin");
		return Astro.redirect("/signin?returnTo=/profile");
	}

	const sessionCookie = Astro.cookies.get("__session")?.value;
	if (!sessionCookie) {
		console.log("[Profile] Session cookie is empty, redirecting to signin");
		return Astro.redirect("/signin?returnTo=/profile");
	}

	// Verify session with a timeout
	const decodedCookie = (await Promise.race([
		auth.verifySessionCookie(sessionCookie, true), // true for checkRevoked
		new Promise((_, reject) =>
			setTimeout(() => reject(new Error("Session verification timeout")), 5000)
		),
	])) as DecodedIdToken;

	if (!decodedCookie) {
		console.log("[Profile] Invalid session, redirecting to signin");
		// Clear invalid cookie
		Astro.cookies.delete("__session");
		return Astro.redirect("/signin?returnTo=/profile");
	}

	// Get user data with type safety
	user = await auth.getUser(decodedCookie.uid);
	if (!user) {
		console.log("[Profile] User not found, redirecting to signin");
		Astro.cookies.delete("__session");
		return Astro.redirect("/signin?returnTo=/profile");
	}

	// Get user preferences with error handling
	const userDoc = await db.collection("users").doc(user.uid).get();
	const userData = userDoc.data() || {};

	// Extract preferences with type safety
	paliEnabled = userData["preferences.showPali"] === true;
	currentTheme = userData["preferences.theme"] || "dark";
	currentFontSize = userData["preferences.fontSize"] || "large";
	paliLookup = userData["preferences.enablePaliLookup"] || true;

	console.log("[Profile] Auth successful, rendering profile page");
} catch (error) {
	console.error("[Profile] Auth error:", error);
	// Clear potentially corrupted session
	Astro.cookies.delete("__session");
	return Astro.redirect("/signin?returnTo=/profile");
}

// Verify we have required data before rendering
if (!user) {
	console.error("[Profile] No user data available after auth");
	return Astro.redirect("/signin?returnTo=/profile");
}
---

<Layout showAuth={true}>
	<div class="max-w-3xl mx-auto py-8 px-4 sm:px-6 lg:px-8">
		<div class="space-y-8">
			<div class="bg-[var(--auth-card-bg)] p-8 rounded-lg shadow-lg">
				<div class="flex justify-between items-center mb-6">
					<h2 class="text-2xl font-semibold text-[var(--text-color)]">
						Profile
					</h2>
					<button
						id="editToggle"
						type="button"
						class="px-4 py-2 text-sm border border-[var(--auth-button-bg)] text-[var(--auth-button-bg)] rounded-md hover:bg-[var(--auth-button-bg)] hover:text-white transition-colors"
					>
						Edit Profile
					</button>
				</div>

				<form id="profile-form" class="space-y-6">
					<div>
						<label
							for="displayName"
							class="block text-sm font-medium text-[var(--text-color)]"
							>Name</label
						>
						<input
							type="text"
							id="displayName"
							name="displayName"
							value={user.displayName || ""}
							disabled
							class="mt-1 block w-full px-3 py-2 bg-[var(--auth-input-bg)] border border-[var(--auth-input-border)] rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-[var(--secondary-color)] focus:border-transparent"
						/>
					</div>
					<div>
						<label
							for="email"
							class="block text-sm font-medium text-[var(--text-color)]"
							>Email</label
						>
						<input
							type="email"
							id="email"
							name="email"
							value={user.email || ""}
							disabled
							class="mt-1 block w-full px-3 py-2 bg-[var(--auth-input-bg)] border border-[var(--auth-input-border)] rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-[var(--secondary-color)] focus:border-transparent"
						/>
						<p id="emailError" class="mt-1 text-sm text-red-500 hidden"></p>
					</div>
					<button
						type="submit"
						disabled
						class="hidden w-full px-4 py-2 bg-[var(--auth-button-bg)] text-white rounded-md hover:bg-[var(--auth-button-hover)] focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-[var(--secondary-color)]"
					>
						Save Changes
					</button>
				</form>
			</div>

			<div class="bg-[var(--auth-card-bg)] p-8 rounded-lg shadow-lg">
				<h2 class="text-2xl font-semibold mb-4 text-[var(--text-color)]">
					Preferences
				</h2>
				<div class="space-y-4">
					<div class="flex items-center justify-between">
						<span class="text-base font-medium text-[var(--text-color)]"
							>Theme</span
						>
						<div class="flex items-center space-x-2">
							<button
								class="px-3 py-2 text-sm rounded-md border border-[var(--auth-input-border)] theme-btn"
								data-theme="light"
								data-active={(currentTheme === "light").toString()}
							>
								Light
							</button>
							<button
								class="px-3 py-2 text-sm rounded-md border border-[var(--auth-input-border)] theme-btn"
								data-theme="dark"
								data-active={(currentTheme === "dark").toString()}
							>
								Dark
							</button>
						</div>
					</div>

					<div class="flex items-center justify-between">
						<span class="text-base font-medium text-[var(--text-color)]">
							Reading Font Size
						</span>
						<div class="flex items-baseline space-x-2">
							<button
								class="p-2 rounded-md border border-[var(--auth-input-border)] font-size-btn flex items-center justify-center"
								data-size="large"
								data-active={currentFontSize === "large" ? "true" : "false"}
								title="Large"
								set:html={FontSizeLarge}
							/>
							<button
								class="p-2 rounded-md border border-[var(--auth-input-border)] font-size-btn flex items-center justify-center"
								data-size="larger"
								data-active={currentFontSize === "larger" ? "true" : "false"}
								title="Larger"
								set:html={FontSizeLarger}
							/>
						</div>
					</div>

					<div class="flex items-center justify-between">
						<span class="text-base font-medium text-[var(--text-color)]"
							>Display Pāli text interleaved with English</span
						>
						<button
							class="px-3 py-2 text-sm rounded-md border border-[var(--auth-input-border)] pali-btn"
							data-active={paliEnabled.toString()}
						>
							{paliEnabled ? "On" : "Off"}
						</button>
					</div>

					<div class="flex items-center justify-between">
						<span class="text-base font-medium text-[var(--text-color)]"
							>Pāli word lookup on double-click/long-press</span
						>
						<button
							class="px-3 py-2 text-sm rounded-md border border-[var(--auth-input-border)] pali-lookup-btn"
							data-active={(paliLookup ?? true).toString()}
						>
							{paliLookup ? "On" : "Off"}
						</button>
					</div>
				</div>
			</div>
		</div>
	</div>
</Layout>

<script>
	import { setTheme } from "../utils/theme";

	// Add synchronization of localStorage with userData
	// for preferences that are only settable in the profile UI
	document.addEventListener("DOMContentLoaded", () => {
		const enablePaliLookup =
			document
				.querySelector(".pali-lookup-btn")
				?.getAttribute("data-active") === "true";
		const currentFontSize =
			document
				.querySelector('.font-size-btn[data-active="true"]')
				?.getAttribute("data-size") || "large";

		// Update localStorage if values are different
		if (localStorage.getItem("paliLookup") !== enablePaliLookup.toString()) {
			localStorage.setItem("paliLookup", enablePaliLookup.toString());
		}
		if (localStorage.getItem("fontSize") !== currentFontSize) {
			localStorage.setItem("fontSize", currentFontSize);
		}
	});

	const profileForm = document.getElementById(
		"profile-form"
	) as HTMLFormElement;
	const editToggle = document.getElementById("editToggle") as HTMLButtonElement;
	const submitButton = profileForm.querySelector(
		'button[type="submit"]'
	) as HTMLButtonElement;
	const inputs = profileForm.querySelectorAll("input");
	let isEditing = false;

	editToggle?.addEventListener("click", () => {
		isEditing = !isEditing;
		inputs.forEach((input) => (input.disabled = !isEditing));
		submitButton.disabled = !isEditing;
		submitButton.classList.toggle("hidden");
		editToggle.textContent = isEditing ? "Cancel" : "Edit Profile";
		editToggle.classList.toggle("border-red-500");
		editToggle.classList.toggle("text-red-500");
		editToggle.classList.toggle("hover:bg-red-500");
		editToggle.classList.toggle("border-[var(--auth-button-bg)]");
		editToggle.classList.toggle("text-[var(--auth-button-bg)]");
		editToggle.classList.toggle("hover:bg-[var(--auth-button-bg)]");

		if (!isEditing) {
			profileForm.reset();
		}
	});

	function validateEmail(email: string): { isValid: boolean; message: string } {
		// Allow: letters, numbers, dots, underscores, hyphens, plus, @ symbol
		const allowedChars = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
		const consecutiveDots = /\.\./;
		const startsWithDot = /^\./;
		const endsWithDot = /\.@/;

		if (!email.includes("@")) {
			return { isValid: false, message: "Email must contain @ symbol" };
		}

		if (startsWithDot.test(email)) {
			return { isValid: false, message: "Email cannot start with a dot" };
		}

		if (endsWithDot.test(email)) {
			return {
				isValid: false,
				message: "Email cannot have a dot just before @",
			};
		}

		if (consecutiveDots.test(email)) {
			return {
				isValid: false,
				message: "Email cannot contain consecutive dots",
			};
		}

		if (!allowedChars.test(email)) {
			return {
				isValid: false,
				message:
					"Email can only contain letters, numbers, and these special characters: . _ % + -",
			};
		}

		return { isValid: true, message: "" };
	}

	const emailInput = document.getElementById("email") as HTMLInputElement;
	const emailError = document.getElementById("emailError");

	emailInput?.addEventListener("input", () => {
		if (emailError && emailInput.value) {
			const validation = validateEmail(emailInput.value);
			if (!validation.isValid) {
				emailError.textContent = validation.message;
				emailError.classList.remove("hidden");
				submitButton.disabled = true;
			} else {
				emailError.classList.add("hidden");
				submitButton.disabled = false;
			}
		}
	});

	profileForm?.addEventListener("submit", async (e) => {
		e.preventDefault();

		const formData = new FormData(profileForm);
		const email = formData.get("email") as string;
		const displayName = formData.get("displayName") as string;

		const validation = validateEmail(email);
		if (!validation.isValid) {
			emailError?.classList.remove("hidden");
			emailError!.textContent = validation.message;
			return;
		}

		try {
			const response = await fetch("/api/auth/update", {
				method: "POST",
				body: formData,
			});

			if (!response.ok) {
				throw new Error(await response.text());
			}

			const result = await response.json();
			if (result.success) {
				// Refresh the page to update navbar and other components
				window.location.reload();
			}
		} catch (error) {
			console.error("Error updating profile:", error);
			alert("Failed to update profile: " + error);
		}
	});

	// Theme handling
	const themeButtons = document.querySelectorAll(".theme-btn");

	// Initialize buttons based on current state
	function updateActiveThemeButton() {
		const currentTheme = document.documentElement.classList.contains("dark")
			? "dark"
			: "light";
		themeButtons.forEach((button) => {
			const buttonTheme = button.getAttribute("data-theme");
			const isActive = buttonTheme === currentTheme;
			button.setAttribute("data-active", isActive.toString());
			if (isActive) {
				button.classList.add("bg-[var(--auth-button-bg)]", "text-white");
			} else {
				button.classList.remove("bg-[var(--auth-button-bg)]", "text-white");
			}
		});
	}

	// Initialize on page load without loading preferences again
	// updateActiveThemeButton();

	// Handle theme button clicks
	themeButtons.forEach((button) => {
		button.addEventListener("click", async () => {
			const theme = button.getAttribute("data-theme");
			if (theme === "light" || theme === "dark") {
				try {
					// Update preference in Firestore and UI
					const formData = new FormData();
					formData.append("theme", theme);
					const response = await fetch("/api/preferences/update", {
						method: "POST",
						body: formData,
					});

					if (!response.ok) {
						throw new Error("Failed to update theme preference");
					}

					// Update UI
					setTheme(theme);
					updateActiveThemeButton();

					// Force reload to ensure all components reflect the new preference
					window.location.reload();
				} catch (error) {
					console.error("Failed to update theme:", error);
				}
			}
		});
	});

	// Handle Pali preference
	const paliBtn = document.querySelector(".pali-btn");

	paliBtn?.addEventListener("click", async () => {
		const isCurrentlyActive = paliBtn.getAttribute("data-active") === "true";
		const newState = !isCurrentlyActive;

		try {
			// 1. Update Firestore
			const formData = new FormData();
			formData.append("showPali", newState.toString());
			const response = await fetch("/api/preferences/update", {
				method: "POST",
				body: formData,
			});

			if (!response.ok) {
				throw new Error("Failed to update Pali preference");
			}

			// 2. Update localStorage and URL
			localStorage.setItem("paliMode", newState.toString());
			const url = new URL(window.location.href);
			if (newState) {
				url.searchParams.set("pli", "true");
			} else {
				url.searchParams.delete("pli");
			}
			window.history.replaceState({}, "", url.toString());

			// 3. Update button UI
			paliBtn.setAttribute("data-active", newState.toString());
			paliBtn.textContent = newState ? "On" : "Off";
			paliBtn.classList.toggle("bg-[var(--auth-button-bg)]", newState);
			paliBtn.classList.toggle("text-white", newState);
		} catch (error) {
			console.error("Failed to update Pali preference:", error);
		}
	});

	// Handle Pali lookup preference
	const paliLookupBtn = document.querySelector(".pali-lookup-btn");

	paliLookupBtn?.addEventListener("click", async () => {
		const isCurrentlyActive =
			paliLookupBtn.getAttribute("data-active") === "true";
		const newState = !isCurrentlyActive;

		try {
			const formData = new FormData();
			formData.append("enablePaliLookup", newState.toString());
			const response = await fetch("/api/preferences/update", {
				method: "POST",
				body: formData,
			});

			if (!response.ok) {
				throw new Error("Failed to update Pali lookup preference");
			}

			localStorage.setItem("paliLookup", newState.toString());
			paliLookupBtn.setAttribute("data-active", newState.toString());
			paliLookupBtn.textContent = newState ? "On" : "Off";
			paliLookupBtn.classList.toggle("bg-[var(--auth-button-bg)]", newState);
			paliLookupBtn.classList.toggle("text-white", newState);
		} catch (error) {
			console.error("Failed to update Pali lookup preference:", error);
		}
	});

	// Font size handling
	const fontSizeButtons = document.querySelectorAll(".font-size-btn");

	fontSizeButtons.forEach((button) => {
		button.addEventListener("click", async () => {
			const size = button.getAttribute("data-size");
			if (size && ["large", "larger"].includes(size)) {
				try {
					const formData = new FormData();
					formData.append("fontSize", size);
					const response = await fetch("/api/preferences/update", {
						method: "POST",
						body: formData,
					});

					if (!response.ok) {
						throw new Error("Failed to update font size preference");
					}

					// Update localStorage
					localStorage.setItem("fontSize", size);

					// Update button states
					fontSizeButtons.forEach((btn) => {
						const isActive = btn.getAttribute("data-size") === size;
						btn.setAttribute("data-active", isActive.toString());
						btn.classList.toggle("bg-[var(--auth-button-bg)]", isActive);
						btn.classList.toggle("text-white", isActive);
					});
				} catch (error) {
					console.error("Failed to update font size:", error);
				}
			}
		});
	});
</script>

<style>
	.theme-btn[data-active="true"] {
		@apply bg-[var(--auth-button-bg)] text-white;
	}
	.pali-btn[data-active="true"] {
		@apply bg-[var(--auth-button-bg)] text-white;
	}
	.font-size-btn[data-active="true"] {
		@apply bg-[var(--auth-button-bg)] text-white;
	}
	.pali-lookup-btn[data-active="true"] {
		@apply bg-[var(--auth-button-bg)] text-white;
	}
</style>
