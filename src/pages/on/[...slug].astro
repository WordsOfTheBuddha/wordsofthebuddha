---
export const prerender = true;
import Layout from "../../layouts/Layout.astro";
import PostCard from "../../components/PostCard.astro";
import ContentTag from "../../components/ContentTag.astro";
import qualities from "../../data/qualities.json";
import { getContentTypeFromApiData } from "../../utils/ContentTagUtils";
import "../../styles/topicTag.css";
import graphSvg from "../../assets/graph.svg?raw";
import {
	buildAllContent,
	findContentBySlug,
	getStaticOnSlugs,
} from "../../utils/discover-data";
import type { UnifiedContentItem } from "../../types/discover";

// Generate static paths for all topics, qualities, and similes (including topic redirects)
export async function getStaticPaths() {
	return getStaticOnSlugs().map((slug) => ({ params: { slug } }));
}

const graphIcon = graphSvg.replace("<svg", '<svg class="w-6 h-6"');

// Get the slug from params
const { slug } = Astro.params;
if (!slug) {
	return Astro.redirect("/");
}

// Build content and select the item for this slug using the shared utility
const allContent = buildAllContent();
const { item: content, type: contentType } = findContentBySlug(
	slug,
	allContent
);
if (!content || !contentType) {
	return new Response(null, { status: 404 });
}

// Get the appropriate content type for the tag
const tagContentType = getContentTypeFromApiData(content);

// ...existing code... (process discourses data, collections, etc.)
const allDiscourses = content.discourses || [];

const primaryDiscourses =
	contentType === "topic"
		? allDiscourses.filter((d: any) => d.isFeatured)
		: [];

const additionalDiscourses =
	contentType === "topic"
		? allDiscourses.filter((d: any) => !d.isFeatured)
		: allDiscourses;

const displayTitle = content.title;
const totalDiscourses = allDiscourses.length;
---

<Layout seoTitle={`${displayTitle} - Words of the Buddha`} showAuth={true}>
	<main class="container mx-auto px-4 py-8">
		<div class="mb-8">
			<div
				class="post-item relative flex flex-col w-full p-5 rounded-lg bg-white dark:bg-gray-800 text-gray-800 dark:text-gray-200 shadow-md"
			>
				<div class="flex items-start justify-between">
					<div class="flex items-start flex-grow">
						<div class="min-w-0 pr-4">
							<h1
								class="text-xl font-semibold flex items-center flex-wrap gap-2"
							>
								<span>{displayTitle}</span>
								<ContentTag contentType={tagContentType} />
								{
									(contentType === "topic" ||
										contentType === "quality") && (
										<a
											href={`/explorer?focus=${slug}&full=1`}
											aria-label="View in explorer"
											title="View in explorer"
											class="inline-flex items-center gap-0 ml-4 px-1.5 py-0.5 rounded border text-xs border-[var(--border-color)] bg-[var(--background-color)] text-[var(--link-color)] hover:text-[var(--link-hover-color)] hover:border-[var(--primary-color)] transition-colors shadow-sm focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-[var(--primary-color)] focus-visible:ring-opacity-50"
										>
											<span
												class="mt-0.5 scale-75"
												set:html={graphIcon}
											/>
											<span>View in explorer</span>
										</a>
									)
								}
							</h1>
						</div>
					</div>
					<div class="shrink-0 self-start">
						<span
							class="px-2 py-0.25 rounded-md text-xs font-medium text-white bg-[var(--primary-color)] shadow-sm"
						>
							{totalDiscourses}
							{totalDiscourses === 1 ? "discourse" : "discourses"}
						</span>
					</div>
				</div>

				<div class="mt-2 ml-2 space-y-2 text-sm">
					{
						content.description && (
							<div class="text-text">{content.description}</div>
						)
					}

					{
						content.synonyms && content.synonyms.length > 0 && (
							<div class="text-gray-600 dark:text-gray-400 text-xs">
								Also known as: {content.synonyms.join(", ")}
							</div>
						)
					}

					{
						content.context && (
							<div class="text-gray-600 dark:text-gray-400 text-xs italic">
								Context: {content.context}
							</div>
						)
					}

					{
						content.pali && content.pali.length > 0 && (
							<div class="pali-paragraph font-semibold text-text text-xs">
								PƒÅli: {content.pali.join(", ")}
							</div>
						)
					}

					{
						(content.supportedBy?.length ||
							content.leadsTo?.length ||
							content.related?.length ||
							content.opposite?.length) && (
							<div class="meta-grid text-xs text-gray-600 dark:text-gray-400 mt-2">
								{(content.supportedBy ?? []).length > 0 && (
									<div class="meta-row">
										<div class="soft meta-label">
											Supported by
										</div>
										<div class="inline-tags">
											{(content.supportedBy ?? []).map(
												(slug: string) => {
													const name = slug
														.split("-")
														.map(
															(w: string) =>
																w
																	.charAt(0)
																	.toUpperCase() +
																w.slice(1)
														)
														.join(" ");
													const isPositive =
														qualities.positive.includes(
															slug
														);
													const isNegative =
														qualities.negative.includes(
															slug
														);
													const tagClass = isPositive
														? "topic-tag positive"
														: isNegative
															? "topic-tag negative"
															: "topic-tag neutral";
													return (
														<a
															href={`/on/${slug}`}
															class={tagClass}
														>
															{name}
														</a>
													);
												}
											)}
										</div>
									</div>
								)}
								{(content.leadsTo ?? []).length > 0 && (
									<div class="meta-row">
										<div class="soft meta-label">
											Leads to
										</div>
										<div class="inline-tags">
											{(content.leadsTo ?? []).map(
												(slug: string) => {
													const name = slug
														.split("-")
														.map(
															(w: string) =>
																w
																	.charAt(0)
																	.toUpperCase() +
																w.slice(1)
														)
														.join(" ");
													const isPositive =
														qualities.positive.includes(
															slug
														);
													const isNegative =
														qualities.negative.includes(
															slug
														);
													const tagClass = isPositive
														? "topic-tag positive"
														: isNegative
															? "topic-tag negative"
															: "topic-tag neutral";
													return (
														<a
															href={`/on/${slug}`}
															class={tagClass}
														>
															{name}
														</a>
													);
												}
											)}
										</div>
									</div>
								)}
								{(content.related ?? []).length > 0 && (
									<div class="meta-row">
										<div class="soft meta-label">
											Related
										</div>
										<div class="inline-tags">
											{(content.related ?? []).map(
												(slug: string) => {
													const name = slug
														.split("-")
														.map(
															(w: string) =>
																w
																	.charAt(0)
																	.toUpperCase() +
																w.slice(1)
														)
														.join(" ");
													const isPositive =
														qualities.positive.includes(
															slug
														);
													const isNegative =
														qualities.negative.includes(
															slug
														);
													const tagClass = isPositive
														? "topic-tag positive"
														: isNegative
															? "topic-tag negative"
															: "topic-tag neutral";
													return (
														<a
															href={`/on/${slug}`}
															class={tagClass}
														>
															{name}
														</a>
													);
												}
											)}
										</div>
									</div>
								)}
								{(content.opposite ?? []).length > 0 && (
									<div class="meta-row">
										<div class="soft meta-label">
											Opposite
										</div>
										<div class="inline-tags">
											{(content.opposite ?? []).map(
												(slug: string) => {
													const name = slug
														.split("-")
														.map(
															(w: string) =>
																w
																	.charAt(0)
																	.toUpperCase() +
																w.slice(1)
														)
														.join(" ");
													const isPositive =
														qualities.positive.includes(
															slug
														);
													const isNegative =
														qualities.negative.includes(
															slug
														);
													const tagClass = isPositive
														? "topic-tag positive"
														: isNegative
															? "topic-tag negative"
															: "topic-tag neutral";
													return (
														<a
															href={`/on/${slug}`}
															class={tagClass}
														>
															{name}
														</a>
													);
												}
											)}
										</div>
									</div>
								)}
							</div>
						)
					}
				</div>
			</div>
		</div>

		{
			/* Featured Discourses Section - Only for topics with curated content */
		}
		{
			primaryDiscourses.length > 0 && (
				<div class="mb-10">
					<h2 class="text-xl font-medium mb-4">
						Featured Discourses
					</h2>
					<div class="space-y-6">
						{primaryDiscourses.map((discourse: any) => (
							<div class="mb-6">
								<div class="relative">
									<PostCard
										title={discourse.title}
										description={discourse.description}
										id={discourse.id}
										titleTag={discourse.note}
									/>
								</div>
							</div>
						))}
					</div>
				</div>
			)
		}

		{
			/* All Discourses or More Discourses Section (flat list in API order) */
		}
		{
			additionalDiscourses.length > 0 && (
				<div class="space-y-6">
					{primaryDiscourses.length > 0 && (
						<h2 class="text-xl font-medium mb-4">
							{contentType === "topic" &&
							primaryDiscourses.length > 0
								? "More Discourses"
								: "Discourses"}
						</h2>
					)}
					<div class="px-2 space-y-4">
						{additionalDiscourses.map((discourse: any) => (
							<PostCard
								title={discourse.title}
								description={discourse.description}
								id={discourse.id}
							/>
						))}
					</div>
				</div>
			)
		}
	</main>
</Layout>
