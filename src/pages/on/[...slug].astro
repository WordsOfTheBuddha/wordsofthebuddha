---
export const prerender = false;
import Layout from "../../layouts/Layout.astro";
import PostCard from "../../components/PostCard.astro";
import ContentTag from "../../components/ContentTag.astro";
import qualities from "../../data/qualities.json";
import { getContentTypeFromApiData } from "../../utils/ContentTagUtils";
import "../../styles/topicTag.css";
import graphSvg from "../../assets/graph.svg?raw";

const graphIcon = graphSvg.replace("<svg", '<svg class="w-6 h-6"');

// Get the slug from params
const { slug } = Astro.params;
if (!slug) {
	return Astro.redirect("/");
}

// Use the discover API to find content for this slug
let content: any = null;
let contentType: string | null = null;

try {
	const apiUrl = new URL("/api/discover", Astro.url.origin);
	const filterValue = slug.replace(/-/g, " ");
	apiUrl.searchParams.set("filter", slug);
	apiUrl.searchParams.set("by", "topics,qualities,similes");

	const response = await fetch(apiUrl.toString());

	const result = await response.json();

	if (result.success && result.data.length > 0) {
		// Priority 1: Check for topic by exact slug match
		const topicMatch = result.data.find(
			(item: any) =>
				item.type === "topic" &&
				(item.slug === slug.toLocaleLowerCase() ||
					item.slug === filterValue)
		);

		if (topicMatch) {
			content = topicMatch;
			contentType = topicMatch.type;
		} else {
			// Priority 2: Check if any topic has this slug in redirects
			const redirectMatch = result.data.find(
				(item: any) =>
					item.type === "topic" &&
					item.redirects &&
					item.redirects.includes(slug)
			);

			if (redirectMatch) {
				// Redirect to the canonical topic slug
				return Astro.redirect(`/on/${redirectMatch.slug}`);
			} else {
				// Priority 3: Check for quality by exact slug match
				const qualityMatch = result.data.find(
					(item: any) =>
						item.type === "quality" &&
						(item.slug === slug.toLocaleLowerCase() ||
							item.slug === filterValue)
				);

				if (qualityMatch) {
					content = qualityMatch;
					contentType = qualityMatch.type;
				} else {
					// Priority 4: Check for simile by exact slug match
					const simileMatch = result.data.find(
						(item: any) =>
							item.type === "simile" &&
							(item.slug === slug.toLocaleLowerCase() ||
								item.slug === filterValue)
					);

					if (simileMatch) {
						content = simileMatch;
						contentType = simileMatch.type;
					}
				}
			}
		}
	}
} catch (error) {
	console.error("Error fetching content from API:", error);
}

// If no content found, redirect to search
if (!contentType || !content) {
	return Astro.redirect(`/search?q=${encodeURIComponent(slug)}`);
}

// Get the appropriate content type for the tag
const tagContentType = getContentTypeFromApiData(content);

// ...existing code... (process discourses data, collections, etc.)
const allDiscourses = content.discourses || [];

const primaryDiscourses =
	contentType === "topic"
		? allDiscourses.filter((d: any) => d.isFeatured)
		: [];

const additionalDiscourses =
	contentType === "topic"
		? allDiscourses.filter((d: any) => !d.isFeatured)
		: allDiscourses;

// Group by collections
const collections: Record<string, { name: string; items: any[] }> = {
	dhp: { name: "The Path of Dhamma (Dhammapada)", items: [] },
	iti: { name: "As It Was Said (Itivuttaka)", items: [] },
	mn: { name: "Middle Length Discourses (Majjhima Nikāya)", items: [] },
	snp: { name: "The Buddha's Ancient Discourses (Sutta Nipāta)", items: [] },
	sn: { name: "Linked Discourses (Saṃyutta Nikāya)", items: [] },
	an: { name: "Numerical Discourses (Aṅguttara Nikāya)", items: [] },
	ud: { name: "Inspired Utterances (Udāna)", items: [] },
};

const collectionOrder = ["dhp", "iti", "mn", "snp", "sn", "an", "ud"];

additionalDiscourses.forEach((discourse: any) => {
	const collection = discourse.collection;
	if (collection in collections) {
		collections[collection].items.push(discourse);
	}
});

for (const key in collections) {
	collections[key].items.sort((a, b) => {
		return a.id.localeCompare(b.id, undefined, {
			numeric: true,
			sensitivity: "base",
		});
	});
}

const displayTitle = content.title;
const totalDiscourses = allDiscourses.length;
---

<Layout seoTitle={`${displayTitle} - Words of the Buddha`} showAuth={true}>
	<main class="container mx-auto px-4 py-8">
		<div class="mb-8">
			<div
				class="post-item relative flex flex-col w-full p-5 rounded-lg bg-white dark:bg-gray-800 text-gray-800 dark:text-gray-200 shadow-md"
			>
				<div class="flex items-start justify-between">
					<div class="flex items-start flex-grow">
						<div class="min-w-0 pr-4">
							<h1
								class="text-xl font-semibold flex items-center flex-wrap gap-2"
							>
								<span>{displayTitle}</span>
								<ContentTag contentType={tagContentType} />
								<a
									href=`/explorer?focus=${slug}&full=1`
									aria-label="View in explorer"
									title="View in explorer"
									class="inline-flex items-center gap-1 ml-4 px-2 py-1 rounded border border-[var(--border-color)] bg-[var(--background-color)] text-[var(--link-color)] hover:text-[var(--link-hover-color)] hover:border-[var(--primary-color)] transition-colors shadow-sm focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-[var(--primary-color)] focus-visible:ring-opacity-50"
								>
									<span class="mt-1" set:html={graphIcon} />
									<span>View in explorer</span>
								</a>
							</h1>
						</div>
					</div>
					<div class="shrink-0 self-start">
						<span
							class="px-2 py-0.25 rounded-md text-xs font-medium text-white bg-[var(--primary-color)] shadow-sm"
						>
							{totalDiscourses}
							{totalDiscourses === 1 ? "discourse" : "discourses"}
						</span>
					</div>
				</div>

				<div class="mt-2 ml-2 space-y-2 text-sm">
					{
						content.description && (
							<div class="text-text">{content.description}</div>
						)
					}

					{
						content.synonyms && content.synonyms.length > 0 && (
							<div class="text-gray-600 dark:text-gray-400 text-xs">
								Also known as: {content.synonyms.join(", ")}
							</div>
						)
					}

					{
						content.context && (
							<div class="text-gray-600 dark:text-gray-400 text-xs italic">
								Context: {content.context}
							</div>
						)
					}

					{
						content.pali && content.pali.length > 0 && (
							<div class="pali-paragraph font-semibold text-text text-xs">
								Pāli: {content.pali.join(", ")}
							</div>
						)
					}

					{
						(content.supportedBy?.length ||
							content.leadsTo?.length ||
							content.related?.length ||
							content.opposite?.length) && (
							<div class="meta-grid text-xs text-gray-600 dark:text-gray-400 mt-2">
								{content.supportedBy?.length > 0 && (
									<div class="meta-row">
										<div class="soft meta-label">
											Supported by
										</div>
										<div class="inline-tags">
											{content.supportedBy.map(
												(slug: string) => {
													const name = slug
														.split("-")
														.map(
															(w: string) =>
																w
																	.charAt(0)
																	.toUpperCase() +
																w.slice(1)
														)
														.join(" ");
													const isPositive =
														qualities.positive.includes(
															slug
														);
													const isNegative =
														qualities.negative.includes(
															slug
														);
													const tagClass = isPositive
														? "topic-tag positive"
														: isNegative
															? "topic-tag negative"
															: "topic-tag neutral";
													return (
														<a
															href={`/on/${slug}`}
															class={tagClass}
														>
															{name}
														</a>
													);
												}
											)}
										</div>
									</div>
								)}
								{content.leadsTo?.length > 0 && (
									<div class="meta-row">
										<div class="soft meta-label">
											Leads to
										</div>
										<div class="inline-tags">
											{content.leadsTo.map(
												(slug: string) => {
													const name = slug
														.split("-")
														.map(
															(w: string) =>
																w
																	.charAt(0)
																	.toUpperCase() +
																w.slice(1)
														)
														.join(" ");
													const isPositive =
														qualities.positive.includes(
															slug
														);
													const isNegative =
														qualities.negative.includes(
															slug
														);
													const tagClass = isPositive
														? "topic-tag positive"
														: isNegative
															? "topic-tag negative"
															: "topic-tag neutral";
													return (
														<a
															href={`/on/${slug}`}
															class={tagClass}
														>
															{name}
														</a>
													);
												}
											)}
										</div>
									</div>
								)}
								{content.related?.length > 0 && (
									<div class="meta-row">
										<div class="soft meta-label">
											Related
										</div>
										<div class="inline-tags">
											{content.related.map(
												(slug: string) => {
													const name = slug
														.split("-")
														.map(
															(w: string) =>
																w
																	.charAt(0)
																	.toUpperCase() +
																w.slice(1)
														)
														.join(" ");
													const isPositive =
														qualities.positive.includes(
															slug
														);
													const isNegative =
														qualities.negative.includes(
															slug
														);
													const tagClass = isPositive
														? "topic-tag positive"
														: isNegative
															? "topic-tag negative"
															: "topic-tag neutral";
													return (
														<a
															href={`/on/${slug}`}
															class={tagClass}
														>
															{name}
														</a>
													);
												}
											)}
										</div>
									</div>
								)}
								{content.opposite?.length > 0 && (
									<div class="meta-row">
										<div class="soft meta-label">
											Opposite
										</div>
										<div class="inline-tags">
											{content.opposite.map(
												(slug: string) => {
													const name = slug
														.split("-")
														.map(
															(w: string) =>
																w
																	.charAt(0)
																	.toUpperCase() +
																w.slice(1)
														)
														.join(" ");
													const isPositive =
														qualities.positive.includes(
															slug
														);
													const isNegative =
														qualities.negative.includes(
															slug
														);
													const tagClass = isPositive
														? "topic-tag positive"
														: isNegative
															? "topic-tag negative"
															: "topic-tag neutral";
													return (
														<a
															href={`/on/${slug}`}
															class={tagClass}
														>
															{name}
														</a>
													);
												}
											)}
										</div>
									</div>
								)}
							</div>
						)
					}
				</div>
			</div>
		</div>

		{
			/* Featured Discourses Section - Only for topics with curated content */
		}
		{
			primaryDiscourses.length > 0 && (
				<div class="mb-10">
					<h2 class="text-xl font-medium mb-4">
						Featured Discourses
					</h2>
					<div class="space-y-6">
						{primaryDiscourses.map((discourse: any) => (
							<div class="mb-6">
								<div class="relative">
									<PostCard
										title={discourse.title}
										description={discourse.description}
										id={discourse.id}
										titleTag={discourse.note}
									/>
								</div>
							</div>
						))}
					</div>
				</div>
			)
		}

		{/* All Discourses or More Discourses Section */}
		{
			additionalDiscourses.length > 0 && (
				<div class="space-y-10">
					{primaryDiscourses.length > 0 && (
						<h2 class="text-xl font-medium mb-4">
							{contentType === "topic" &&
							primaryDiscourses.length > 0
								? "More Discourses"
								: "Discourses"}
						</h2>
					)}
					{collectionOrder.map((collectionKey) => {
						const collection = collections[collectionKey];
						if (collection.items.length === 0) return null;

						return (
							<div>
								<h4 class="mb-6 border-b border-gray-200 dark:border-gray-700 text-gray-600 dark:text-gray-400 pb-2 pl-4">
									In {collection.name}
								</h4>
								<div class="px-2 space-y-4">
									{collection.items.map((discourse: any) => (
										<PostCard
											title={discourse.title}
											description={discourse.description}
											id={discourse.id}
										/>
									))}
								</div>
							</div>
						);
					})}
				</div>
			)
		}
	</main>
</Layout>
