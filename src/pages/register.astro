---
export const prerender = false;
import Layout from "../layouts/Layout.astro";
import { isFirebaseInitialized } from "../service/firebase/server";

/* Check if Firebase is initialized */
if (!isFirebaseInitialized) {
	// Redirect to home page with error message
	return Astro.redirect("/?auth-unavailable=true");
}

const returnTo = Astro.url.searchParams.get("returnTo") || "/review-room";
console.log("return to in register is: ", returnTo);
---

<Layout>
	<div class="flex items-baseline justify-center py-8 px-4 sm:px-6 lg:px-8">
		<div
			class="max-w-md w-full space-y-8 bg-[var(--auth-card-bg)] p-8 rounded-lg shadow-lg"
		>
			<div>
				<h1
					class="mt-6 text-center text-3xl font-bold text-[var(--text-color)]"
				>
					Create Account
				</h1>
				<p class="mt-2 text-center text-sm text-[var(--text-color)]">
					Already have an account?
					<a
						href="/signin"
						class="font-medium text-[var(--link-color)] hover:text-[var(--link-hover-color)]"
					>
						Sign in
					</a>
				</p>
			</div>

			<form
				class="mt-8 space-y-6"
				action="/api/auth/register"
				method="post"
				enctype="application/x-www-form-urlencoded"
			>
				<div class="rounded-md shadow-sm space-y-4">
					<div>
						<label
							for="name"
							class="block text-sm font-medium text-[var(--text-color)]"
							>Name</label
						>
						<input
							type="text"
							name="name"
							id="name"
							required
							class="mt-1 block w-full px-3 py-2 bg-[var(--auth-input-bg)] border border-[var(--auth-input-border)] rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-[var(--secondary-color)] focus:border-transparent"
						/>
					</div>
					<div>
						<label
							for="email"
							class="block text-sm font-medium text-[var(--text-color)]"
							>Email</label
						>
						<input
							type="email"
							name="email"
							id="email"
							required
							class="mt-1 block w-full px-3 py-2 bg-[var(--auth-input-bg)] border border-[var(--auth-input-border)] rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-[var(--secondary-color)] focus:border-transparent"
						/>
						<p
							id="emailError"
							class="mt-1 text-sm text-red-500 hidden"
						>
						</p>
					</div>
					<div>
						<label
							for="password"
							class="block text-sm font-medium text-[var(--text-color)]"
							>Password</label
						>
						<input
							type="password"
							name="password"
							id="password"
							required
							class="mt-1 block w-full px-3 py-2 bg-[var(--auth-input-bg)] border border-[var(--auth-input-border)] rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-[var(--secondary-color)] focus:border-transparent"
						/>
					</div>
				</div>

				<input type="hidden" name="returnTo" value={returnTo} />

				<div>
					<button
						type="submit"
						class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-[var(--auth-button-bg)] hover:bg-[var(--auth-button-hover)] focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-[var(--secondary-color)]"
					>
						Register
					</button>
				</div>
			</form>
		</div>
	</div>
</Layout>

<script>
	const emailInput = document.getElementById("email") as HTMLInputElement;
	const emailError = document.getElementById("emailError");
	const submitButton = document.querySelector(
		'button[type="submit"]'
	) as HTMLButtonElement;

	function validateEmail(email: string): {
		isValid: boolean;
		message: string;
	} {
		// Allow: letters, numbers, dots, underscores, hyphens, plus, @ symbol
		const allowedChars = /^[a-zA-Z0-9._+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
		const consecutiveDots = /\.\./;
		const startsWithDot = /^\./;
		const endsWithDot = /\.@/;

		if (!email.includes("@")) {
			return { isValid: false, message: "Email must contain @ symbol" };
		}

		if (startsWithDot.test(email)) {
			return { isValid: false, message: "Email cannot start with a dot" };
		}

		if (endsWithDot.test(email)) {
			return {
				isValid: false,
				message: "Email cannot have a dot just before @",
			};
		}

		if (consecutiveDots.test(email)) {
			return {
				isValid: false,
				message: "Email cannot contain consecutive dots",
			};
		}

		if (!allowedChars.test(email)) {
			return {
				isValid: false,
				message:
					"Email can only contain letters, numbers, and these special characters: . _ + -",
			};
		}

		return { isValid: true, message: "" };
	}

	emailInput?.addEventListener("input", () => {
		if (emailError && emailInput.value) {
			const validation = validateEmail(emailInput.value);
			if (!validation.isValid) {
				emailError.textContent = validation.message;
				emailError.classList.remove("hidden");
				submitButton.disabled = true;
			} else {
				emailError.classList.add("hidden");
				submitButton.disabled = false;
			}
		}
	});

	document.querySelector("form")?.addEventListener("submit", (e) => {
		const validation = validateEmail(emailInput.value);
		if (!validation.isValid) {
			e.preventDefault();
			emailError?.classList.remove("hidden");
			emailError!.textContent = validation.message;
		}
	});
</script>
