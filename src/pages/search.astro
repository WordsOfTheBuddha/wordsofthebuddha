---
export const prerender = false;
import Layout from "../layouts/Layout.astro";
import { transformId } from "../utils/transformId";
import SearchIcon from "../assets/search.svg?raw";
import HelpIcon from "../assets/help-solid.svg?raw";
import { performSearch, type SearchResult } from "../service/search/search";

const query = decodeURIComponent(Astro.url.searchParams.get("q") || "");
const searchResults: SearchResult[] = query
	? await performSearch(query, { highlight: true })
	: [];
console.log("results length: ", searchResults.length);
---

<Layout title="" showAuth={true}>
	<div class="relative">
		<!-- Sticky search container -->
		<div class="sticky top-0 z-10 bg-[var(--bg-color)] py-4 shadow-sm">
			<div class="max-w-2xl mx-auto">
				<form method="get" action="/search">
					<div class="relative">
						<input
							type="search"
							name="q"
							value={query}
							placeholder="Search suttas..."
							class="w-full p-4 pl-12 text-lg border rounded-lg bg-[var(--auth-input-bg)] border-[var(--auth-input-border)] text-[var(--text-color)] search-input"
							autocomplete="off"
						/>
						<div class="absolute left-4 top-5 text-gray-400">
							<Fragment set:html={SearchIcon} />
						</div>
						<button
							type="button"
							class="absolute right-4 top-5 text-gray-400 hover:text-gray-600"
							title="Search Help"
							onclick="document.getElementById('search-help').classList.toggle('hidden')"
						>
							<Fragment set:html={HelpIcon} />
						</button>
					</div>
				</form>

				<!-- Search help and results container -->
				<div class="max-w-2xl mx-auto mt-2">
					<div
						id="search-help"
						class="hidden mt-2 p-4 bg-white dark:bg-gray-800 rounded-lg shadow-md text-sm"
					>
						<h3 class="font-semibold mb-2">Search Syntax:</h3>
						<ul class="space-y-1">
							<li>
								<code class="not-prose">quest</code> - Relevance
								(including fuzzy) match on quest
							</li>
							<li>
								<code class="not-prose">'jhana</code> - Exact match
								on jhana
							</li>
							<li>
								<code class="not-prose">!wrong</code> - Discourses
								that do not have the term wrong are matched
							</li>
							<li>
								<code class="not-prose">^SN22</code> - Discourses
								that start with SN22
							</li>
							<li>
								<code class="not-prose">world$</code> - Ends with
								world
							</li>
							<li>
								<code class="not-prose"
									>"perception consciousness jhana"</code
								> - Exact matches for perception, consciousness,
								and jhana
							</li>

							<li>
								<code class="not-prose"
									>"letting go" !anger</code
								> - Exactly matches "letting go" and without anger
							</li>
							<li>
								<code class="not-prose"
									>illusion | ignorance</code
								> - Matches either illusion or ignorance on any fields
							</li>
						</ul>
						<h3 class="font-semibold mb-2">
							More Specific Examples:
						</h3>
						<p class="mt-2 text-xs text-gray-500">
							<ul class="space-y-1">
								<li>
									<code class="not-prose">!^DHP</code> matches
									all discourses except those starting with DHP
								</li>
								<li>
									<code class="not-prose"
										>^SN content:'consciousness
										content:!perception</code
									> matches all SN discourses that have consciousness
									in content but do not have perception in content.
								</li>
								<li>
									<code class="not-prose"
										>title:element (content:space |
										content;consciousness)</code
									> matches where title is element and content
									has either space or consciousness.
								</li>
								<li>
									<code class="not-prose"
										>^AN (urgency | faith) !mindfulness
										!child</code
									> matches AN discourses that have urgency or
									fatih in them, and do not have the words mindfulness
									or child in them.
								</li>
							</ul>
						</p>
					</div>
				</div>

				<div class="mt-4">
					{
						query && (
							<p class="mb-4 text-sm text-gray-500">
								Found {searchResults.length} results for {query}
							</p>
						)
					}

					{
						searchResults.length === 0 && query && (
							<p class="text-center text-gray-500">
								No results found
							</p>
						)
					}

					{
						searchResults.map((item: SearchResult) => (
							<div class="relative flex flex-col w-full p-5 mt-6 rounded-lg bg-white dark:bg-gray-800 text-gray-800 dark:text-gray-200 transition-shadow duration-200 shadow-md dark:shadow-[0_0_10px_rgba(255,255,255,0.1)] hover:shadow-lg dark:hover:shadow-[0_0_15px_rgba(255,255,255,0.2)]">
								<div class="flex items-start">
									<div class="min-w-0 pr-4">
										<h2 class="text-base sm:text-lg font-semibold text-text">
											<a
												href={`/${item.slug}`}
												class="hover:text-link-color id mr-2 font-normal"
											>
												{transformId(`${item.slug}`)}
												&nbsp;
												<span style="color:var(--text-color)">
													{item.title}
												</span>
											</a>
										</h2>
									</div>
								</div>
								{item.description && (
									<p class="mt-2 text-text line-clamp-3 text-sm sm:text-base">
										{item.description}
									</p>
								)}
								{item.contentSnippet && (
									<p
										class="mt-2 text-gray-500 text-sm"
										set:html={item.contentSnippet}
									/>
								)}
							</div>
						))
					}
				</div>
			</div>
		</div>

		<style>
			.id {
				font-size: 0.95rem;
				display: inline-block;
				@media (min-width: 640px) {
					font-size: 1.1rem;
				}
			}
			.text-text {
				color: var(--text-color);
				margin: 0.5rem 0;
			}

			/* Remove the clear (x) button */
			.search-input::-webkit-search-cancel-button {
				display: none;
			}
			.search-input::-webkit-search-decoration {
				display: none;
			}

			.search-input::-ms-clear {
				display: none;
			}

			/* Add styles for the highlighted text */
			:global(mark) {
				color: var(--text-color);
			}
			/* Add selection styles for better contrast */
			:global(mark::selection) {
				color: white;
				background-color: #2563eb; /* blue-600 */
			}

			.text-gray-500 {
				@apply dark:text-gray-300;
			}

			code {
				@apply bg-gray-100 dark:bg-gray-700 px-1.5 py-0.5 rounded text-sm font-mono;
			}

			/* Add smooth transition for sticky header shadow */
			.sticky {
				transition: box-shadow 0.2s ease-in-out;
			}
		</style>
	</div></Layout
>
