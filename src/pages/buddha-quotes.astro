---
import quotes from "../data/buddha_quotes";
import Layout from "../layouts/Layout.astro";

const splitQuote = (quote: string) => {
	const parts = quote.split(" - ");
	if (parts.length > 1) {
		const source = parts.pop() ?? "";
		return { text: parts.join(" - "), source };
	}
	return { text: quote, source: "" };
};

const fallbackQuote = splitQuote(quotes[0] ?? "");
const fallbackLines = fallbackQuote.text.split("\n");
const toSlug = (source: string) =>
	source.trim().toLowerCase().replace(/\s+/g, "");

const fallbackSlug = fallbackQuote.source
	? `/${toSlug(fallbackQuote.source)}`
	: null;

const layoutProps = {
	seoTitle: "Buddha Quote of the Day - Words of the Buddha",
	showAuth: false,
	showPali: false,
	showReadLater: false,
	showSave: false,
	showRead: false,
	showFilter: false,
};
---

<Layout {...layoutProps}>
	<div class="flex flex-1 items-center justify-center py-10">
		<section
			class="mx-auto w-full max-w-2xl rounded-3xl border border-[color:var(--surface-border)] bg-[var(--surface-elevated)] p-8 shadow-xl backdrop-blur-sm transition-colors"
		>
			<header class="mb-6 text-center">
				<p
					class="text-sm font-semibold uppercase tracking-[0.3em] text-[var(--text-muted)]"
				>
					Buddha Quote
				</p>
				<h1
					class="mt-2 text-4xl font-semibold tracking-tight text-[var(--surface-ink)]"
				>
					<span aria-hidden="true" class="mr-2">ðŸª·</span>
					Quote of the Day
				</h1>
				<p
					id="quote-date"
					class="mt-3 text-sm text-[var(--text-muted)]"
				>
				</p>
			</header>
			<article class="space-y-6 text-center">
				<div
					class="flex flex-col gap-1 text-xl leading-relaxed text-[var(--surface-ink)]"
					id="quote-text"
				>
					{fallbackLines.map((line) => <span>{line}</span>)}
				</div>
				<p
					class="text-base font-medium text-[var(--text-muted)]"
					id="quote-source"
				>
					{fallbackQuote.source}
				</p>
			</article>
			<footer
				class="mt-8 flex flex-col items-center gap-3 text-sm text-[var(--text-muted)] sm:flex-row sm:justify-center sm:gap-4"
			>
				<a
					id="view-discourse"
					href={fallbackSlug ?? "#"}
					class:list={[
						"inline-flex items-center gap-1 px-4 py-2 text-sm rounded-full border border-[color:var(--surface-border)] transition-all duration-200 shadow-sm focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-[var(--primary-color)] no-underline",
						fallbackSlug
							? "bg-[var(--primary-color)] text-white border-transparent hover:opacity-95"
							: "border-[color:var(--surface-border)] bg-transparent text-[var(--surface-ink)] pointer-events-none opacity-50",
					]}
				>
					View discourse
				</a>
				<button
					id="view-another"
					type="button"
					class="inline-flex items-center gap-1 px-4 py-2 text-sm rounded-full transition-all duration-300 border border-[color:var(--surface-border)] hover:bg-[rgba(44,44,44,0.08)] dark:hover:bg-[rgba(231,220,196,0.12)] focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-[var(--primary-color)]"
				>
					View another quote
				</button>
			</footer>
		</section>
	</div>

	<script type="module" define:vars={{ quotes }}>
		const quoteTextEl = document.getElementById("quote-text");
		const quoteSourceEl = document.getElementById("quote-source");
		const quoteDateEl = document.getElementById("quote-date");
		const viewDiscourseEl = document.getElementById("view-discourse");
		const viewAnotherBtn = document.getElementById("view-another");

		function splitQuote(quote) {
			const parts = quote.split(" - ");
			if (parts.length > 1) {
				const source = parts.pop() ?? "";
				return { text: parts.join(" - "), source };
			}
			return { text: quote, source: "" };
		}

		function hashString(str) {
			let hash = 0;
			for (let i = 0; i < str.length; i += 1) {
				hash = (hash << 5) - hash + str.charCodeAt(i);
				hash |= 0;
			}
			return Math.abs(hash);
		}

		function getDateKey() {
			const now = new Date();
			const year = now.getFullYear();
			const month = `${now.getMonth() + 1}`.padStart(2, "0");
			const day = `${now.getDate()}`.padStart(2, "0");
			return `${year}-${month}-${day}`;
		}

		function formatDisplayDate() {
			return new Intl.DateTimeFormat(undefined, {
				weekday: "long",
				month: "long",
				day: "numeric",
				year: "numeric",
			}).format(new Date());
		}

		function toSlug(source) {
			return source.trim().toLowerCase().replace(/\s+/g, "");
		}

		let currentIndex = -1;

		function pickQuote() {
			if (!Array.isArray(quotes) || quotes.length === 0) {
				return { text: "", source: "" };
			}
			if (currentIndex === -1) {
				const key = getDateKey();
				const hash = hashString(key);
				currentIndex = hash % quotes.length;
			} else {
				let nextIndex = currentIndex;
				while (quotes.length > 1 && nextIndex === currentIndex) {
					nextIndex = Math.floor(Math.random() * quotes.length);
				}
				currentIndex = nextIndex;
			}
			return splitQuote(quotes[currentIndex]);
		}

		function renderQuote() {
			const quote = pickQuote();
			if (quoteTextEl) {
				quoteTextEl.innerHTML = "";
				quote.text.split("\n").forEach((line) => {
					const span = document.createElement("span");
					span.textContent = line;
					quoteTextEl.appendChild(span);
				});
			}
			if (quoteSourceEl) {
				quoteSourceEl.textContent = quote.source;
				quoteSourceEl.style.opacity = quote.source ? "1" : "0.7";
			}
			if (quoteDateEl) {
				quoteDateEl.textContent = formatDisplayDate();
			}
			if (viewDiscourseEl) {
				if (quote.source) {
					const slug = `/${toSlug(quote.source)}`;
					viewDiscourseEl.setAttribute("href", slug);
					viewDiscourseEl.classList.remove(
						"pointer-events-none",
						"opacity-50"
					);
				} else {
					viewDiscourseEl.setAttribute("href", "#");
					viewDiscourseEl.classList.add(
						"pointer-events-none",
						"opacity-50"
					);
				}
			}
		}

		if (viewAnotherBtn) {
			viewAnotherBtn.addEventListener("click", () => {
				renderQuote();
			});
		}

		document.addEventListener("visibilitychange", () => {
			if (document.visibilityState === "visible") {
				currentIndex = -1;
				renderQuote();
			}
		});

		renderQuote();
	</script>
</Layout>
