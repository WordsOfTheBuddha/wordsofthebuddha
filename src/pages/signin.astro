---
export const prerender = false;
import { app } from "../firebase/server";
import { getAuth } from "firebase-admin/auth";
import Layout from "../layouts/Layout.astro";

/* Check if the user is authenticated */
const auth = getAuth(app);
if (Astro.cookies.has("__session")) {
	const sessionCookie = Astro.cookies.get("__session")?.value;
	if (!sessionCookie) return;
	const decodedCookie = await auth.verifySessionCookie(sessionCookie);
	if (decodedCookie) {
		return Astro.redirect("/dashboard");
	}
}

const returnTo = Astro.url.searchParams.get("returnTo") || "/dashboard";
---

<Layout>
	<div class="flex items-baseline justify-center py-8 px-4 sm:px-6 lg:px-8">
		<div
			class="max-w-md w-full space-y-8 bg-[var(--auth-card-bg)] p-8 rounded-lg shadow-lg"
		>
			<div>
				<h1
					class="mt-6 text-center text-3xl font-bold text-[var(--text-color)]"
				>
					Sign in
				</h1>
				<p class="mt-2 text-center text-sm text-[var(--text-color)]">
					New here?
					<a
						href=`/register?returnTo=${encodeURIComponent(returnTo)}`
						class="font-medium text-[var(--link-color)] hover:text-[var(--link-hover-color)]"
					>
						Create an account
					</a>
				</p>
			</div>
			<form
				class="mt-8 space-y-6"
				action="/api/auth/signin"
				method="post"
				novalidate
			>
				<div class="rounded-md shadow-sm space-y-4">
					<div>
						<label
							for="email"
							class="block text-sm font-medium text-[var(--text-color)]"
							>Email</label
						>
						<input
							type="email"
							name="email"
							id="email"
							required
							pattern="^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"
							class="mt-1 block w-full px-3 py-2 bg-[var(--auth-input-bg)] border border-[var(--auth-input-border)] rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-[var(--secondary-color)] focus:border-transparent"
						/>
						<p class="mt-1 text-sm text-red-500 hidden" id="email-error"></p>
					</div>
					<div>
						<label
							for="password"
							class="block text-sm font-medium text-[var(--text-color)]"
							>Password</label
						>
						<input
							type="password"
							name="password"
							id="password"
							required
							minlength="6"
							class="mt-1 block w-full px-3 py-2 bg-[var(--auth-input-bg)] border border-[var(--auth-input-border)] rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-[var(--secondary-color)] focus:border-transparent"
						/>
						<p class="mt-1 text-sm text-red-500 hidden" id="password-error"></p>
					</div>
				</div>

				<div>
					<button
						type="submit"
						class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-[var(--auth-button-bg)] hover:bg-[var(--auth-button-hover)] focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-[var(--secondary-color)]"
					>
						Sign in
					</button>
				</div>
			</form>
		</div>
	</div>
</Layout>
<script>
	import {
		getAuth,
		inMemoryPersistence,
		signInWithEmailAndPassword,
	} from "firebase/auth";
	import { app } from "../firebase/client";
	import { loadPreferences } from "../utils/theme";

	const returnTo =
		new URL(window.location.href).searchParams.get("returnTo") || "/dashboard";

	const auth = getAuth(app);
	// This will prevent the browser from storing session data
	auth.setPersistence(inMemoryPersistence);

	const form = document.querySelector("form") as HTMLFormElement;
	const emailInput = document.getElementById("email") as HTMLInputElement;
	const passwordInput = document.getElementById("password") as HTMLInputElement;
	const emailError = document.getElementById(
		"email-error"
	) as HTMLParagraphElement;
	const passwordError = document.getElementById(
		"password-error"
	) as HTMLParagraphElement;

	const validateEmail = (email: string): boolean => {
		const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
		return emailRegex.test(email);
	};

	const showError = (element: HTMLParagraphElement, message: string) => {
		element.textContent = message;
		element.classList.remove("hidden");
	};

	const hideError = (element: HTMLParagraphElement) => {
		element.textContent = "";
		element.classList.add("hidden");
	};

	form.addEventListener("submit", async (e) => {
		e.preventDefault();
		let isValid = true;

		// Reset error messages
		hideError(emailError);
		hideError(passwordError);

		const formData = new FormData(form);
		const email = formData.get("email")?.toString() || "";
		const password = formData.get("password")?.toString() || "";

		// Validate email
		if (!validateEmail(email)) {
			showError(emailError, "Please enter a valid email address");
			isValid = false;
		}

		// Validate password
		if (password.length < 6) {
			showError(passwordError, "Password must be at least 6 characters long");
			isValid = false;
		}

		if (!isValid) return;

		try {
			const userCredential = await signInWithEmailAndPassword(
				auth,
				email,
				password
			);
			const idToken = await userCredential.user.getIdToken();
			// Append returnTo param
			const response = await fetch(
				`/api/auth/signin?returnTo=${encodeURIComponent(returnTo)}`,
				{
					method: "GET",
					headers: {
						Authorization: `Bearer ${idToken}`,
					},
				}
			);

			if (response.redirected) {
				console.log("sign in loaded preferences");
				await loadPreferences();
				window.location.assign(response.url);
			}
		} catch (error: any) {
			// Handle Firebase auth errors
			if (error.code === "auth/invalid-email") {
				showError(emailError, "Invalid email format");
			} else if (error.code === "auth/user-not-found") {
				showError(emailError, "No account found with this email");
			} else if (error.code === "auth/wrong-password") {
				showError(passwordError, "Incorrect password");
			} else {
				showError(
					passwordError,
					`An error occurred during sign in: ",
					${error.code}`
				);
			}
		}
	});

	// Real-time validation
	emailInput.addEventListener("input", () => {
		if (validateEmail(emailInput.value)) {
			hideError(emailError);
		}
	});

	passwordInput.addEventListener("input", () => {
		if (passwordInput.value.length >= 6) {
			hideError(passwordError);
		}
	});
</script>
