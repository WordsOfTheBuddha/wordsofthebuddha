---
export const prerender = false;

import { determineRouteType } from "../utils/routeHandler";
import CollectionLayout from "../layouts/CollectionLayout.astro";
import { getEntry } from "astro:content";
import {
	parseContent,
	createCombinedMarkdown,
	compareHierarchicalNumber,
	constructHierarchicalEnd,
	isValidParagraphRange,
	debug,
} from "../utils/contentParser";
import { routes } from "../utils/routes";
import Layout from "../layouts/Layout.astro";
import { getLastModified } from "../utils/getLastModified";
import MDContent from "../components/MDContent.astro";
import { transformId } from "../utils/transformId";

// Extract slug from params
const { id: originalId } = Astro.params;
let id = originalId;

// Filter out system/browser requests early
const SYSTEM_REQUEST_PATTERNS = [
	".well-known",
	"favicon.ico",
	"robots.txt",
	"sitemap.xml",
	"apple-touch-icon",
	"chrome-extension",
	"__webpack",
	"_next",
	".js.map",
	".css.map",
];

const isSystemRequest = SYSTEM_REQUEST_PATTERNS.some((pattern) =>
	originalId?.includes(pattern)
);

if (isSystemRequest || !id) {
	return new Response(null, { status: 404 });
}

const route = determineRouteType(id);
debug("route type is: ", route.type, route.metadata);

// Initialize variables for different route types
let collectionProps;
let suttaProps;
let mainContent = "";
let sideContent;
const layout =
	(Astro.url.searchParams.get("layout") as "split" | "interleaved") ||
	"interleaved";

// Handle collection routes
if (route.type === "collection" && route.pattern) {
	const viewMode = Astro.url.searchParams.get("view") || "collections";
	collectionProps = {
		title: route.metadata?.title || "Collection",
		description: route.metadata?.description || "Collection of suttas",
		collection: viewMode === "collections",
		children: route.metadata?.children || {},
		searchPattern: route.pattern,
	};
} else {
	// Continue with existing sutta handling logic

	// Find current index in sorted routes or find containing route
	let currentIndex = routes.findIndex((route) => route === id);
	let sectionNumber;
	let fullRef;
	let paragraphRequest: {
		type: "single" | "range";
		start: number;
		end?: number;
	} | null = null;
	let baseDiscourseId = id;
	let discourseRange: { start: string; end: string } | null = null;

	// Helper function to check if a range contains another range
	function rangeContainsRange(
		parentRange: string,
		targetRange: string
	): boolean {
		const [parentStart, parentEnd] = parentRange.split("-");
		const [targetStart, targetEnd] = targetRange.split("-");

		// Debug logging in development only
		debug(
			`Checking if parent range ${parentRange} contains target range ${targetRange}`
		);
		debug(
			`Parent: ${parentStart} to ${parentEnd}, Target: ${targetStart} to ${targetEnd}`
		);

		// Use hierarchical comparison instead of parseFloat
		const targetStartInRange =
			compareHierarchicalNumber(targetStart, parentStart) >= 0;
		const targetEndInRange =
			compareHierarchicalNumber(targetEnd, parentEnd) <= 0;

		debug(
			`targetStartInRange: ${targetStartInRange}, targetEndInRange: ${targetEndInRange}`
		);

		return targetStartInRange && targetEndInRange;
	}

	if (currentIndex === -1) {
		// Parse the ID to find potential parent route OR paragraph request
		// First, try to parse the full ID more carefully
		debug(`Full ID parsing for: ${id}`);

		// Check if this looks like a paragraph range (ends with .X or .X-Y)
		const paragraphRangeMatch = id.match(/^(.+)\.(\d+(?:-\d+)?)$/);
		if (paragraphRangeMatch) {
			const [, baseId, paragraphPart] = paragraphRangeMatch;
			debug(
				`Detected potential paragraph range - baseId: ${baseId}, paragraphPart: ${paragraphPart}`
			);

			// Check if the baseId exists as a discourse
			const baseContent = await getEntry("all", baseId);
			if (baseContent) {
				debug(
					`Found baseContent for ${baseId} - treating as paragraph range`
				);
				// Parse the paragraph part
				if (paragraphPart.includes("-")) {
					const [start, end] = paragraphPart.split("-").map(Number);
					if (isValidParagraphRange(start, end)) {
						paragraphRequest = { type: "range", start, end };
						baseDiscourseId = baseId;
						id = baseId;
						currentIndex = routes.findIndex(
							(route) => route === baseId
						);
						fullRef = transformId(baseId);
						debug(
							`Set up paragraph range: ${start}-${end} for ${baseId}`
						);
					}
				} else {
					const paragraphNum = Number(paragraphPart);
					if (!isNaN(paragraphNum)) {
						paragraphRequest = {
							type: "single",
							start: paragraphNum,
						};
						baseDiscourseId = baseId;
						id = baseId;
						currentIndex = routes.findIndex(
							(route) => route === baseId
						);
						fullRef = transformId(baseId);
						debug(
							`Set up single paragraph: ${paragraphNum} for ${baseId}`
						);
					}
				}
			} else {
				debug(
					`No baseContent found for ${baseId} - not a paragraph range`
				);
			}
		}

		// If still no match, try the original discourse range logic
		if (currentIndex === -1) {
			debug(`No paragraph range match, trying discourse range logic`);
			const idParseMatch = id.match(/^([a-z]+)(\d+(?:\.\d+)?(?:-\d+)?)/);
			debug(`Discourse range parsing - id: ${id}, match:`, idParseMatch);
			if (idParseMatch) {
				const [, prefix, numericPart] = idParseMatch;
				debug(
					`Parsed for discourse range - prefix: ${prefix}, numericPart: ${numericPart}`
				);

				// Check for discourse ranges
				if (numericPart.includes("-")) {
					const [startStr, endStr] = numericPart.split("-");
					debug(
						`Found range in numericPart: ${startStr} to ${endStr}`
					);

					// Find a route that contains this range
					const parentRoute = routes.find((route) => {
						if (!route.startsWith(prefix)) return false;

						const rangeMatch = route.match(
							/(\d+(?:\.\d+)?)-(\d+(?:\.\d+)?)$/
						);

						if (!rangeMatch) return false;

						// Check if the route's range contains our target range
						const routeRangeStr = rangeMatch[0];
						const targetRangeStr = `${startStr}-${endStr}`;
						const contains = rangeContainsRange(
							routeRangeStr,
							targetRangeStr
						);

						return contains;
					});

					if (parentRoute) {
						debug(
							`Found parent route for discourse range: ${parentRoute}`
						);
						currentIndex = routes.findIndex(
							(route) => route === parentRoute
						);
						id = parentRoute;
						fullRef = transformId(parentRoute);
						// Set up discourse range for content parsing
						// Construct the proper end value with full hierarchical structure
						const constructedEnd = constructHierarchicalEnd(
							startStr,
							endStr
						);
						discourseRange = {
							start: startStr,
							end: constructedEnd,
						};
						debug(`Set up discourse range:`, discourseRange);
					} else {
						debug(`No parent route found for discourse range`);
					}
				} else {
					debug(
						`No range found, checking for single discourse section`
					);
					// Single discourse section (existing logic)
					sectionNumber = numericPart;

					// Find a route that contains this number in its range
					const parentRoute = routes.find((route) => {
						if (!route.startsWith(prefix)) return false;

						const rangeMatch = route.match(
							/(\d+(?:\.\d+)?)-(\d+(?:\.\d+)?)$/
						);

						if (!rangeMatch) return false;

						const isInRange =
							compareHierarchicalNumber(
								numericPart,
								rangeMatch[0]
							) >= 0;

						return isInRange;
					});

					if (parentRoute) {
						debug(
							`Found parent route for single section: ${parentRoute}`
						);
						currentIndex = routes.findIndex(
							(route) => route === parentRoute
						);
						id = parentRoute;
						fullRef = transformId(parentRoute);
					} else {
						debug(`No parent route found for single section`);
					}
				}
			}
		}
	}

	if (currentIndex === -1) {
		debug("No matching route found for:", id);
		return Astro.redirect(`/search?q=${id}`);
	}

	// Get showPali from query string
	const showPali = Astro.url.searchParams.get("pli") === "true";

	// Load content with fresh file system read in development
	let contentItem;
	if (import.meta.env.DEV) {
		try {
			const { readFile } = await import("node:fs/promises");
			const { join } = await import("node:path");

			// Get the correct file path from getEntry
			const tempContentItem = await getEntry("all", id);
			if (tempContentItem?.filePath) {
				const filePath = join(process.cwd(), tempContentItem.filePath);
				const rawContent = await readFile(filePath, "utf-8");

				// Use getEntry for metadata but replace body with fresh content
				contentItem = await getEntry("all", id);
				if (contentItem && rawContent) {
					const frontmatterStart = rawContent.indexOf("---");

					if (frontmatterStart !== -1) {
						const frontmatterEnd = rawContent.indexOf(
							"\n---\n",
							frontmatterStart + 3
						);

						if (frontmatterEnd !== -1) {
							// Extract and parse frontmatter
							const frontmatterContent = rawContent.slice(
								frontmatterStart + 3,
								frontmatterEnd
							);

							// Parse frontmatter YAML
							try {
								const frontmatterLines =
									frontmatterContent.split("\n");
								const frontmatterData: Record<string, any> = {};

								for (const line of frontmatterLines) {
									const colonIndex = line.indexOf(":");
									if (colonIndex > 0) {
										const key = line
											.substring(0, colonIndex)
											.trim();
										const value = line
											.substring(colonIndex + 1)
											.trim();
										// Remove quotes if present
										const cleanValue = value.replace(
											/^["']|["']$/g,
											""
										);
										frontmatterData[key] = cleanValue;
									}
								}

								// Update contentItem.data properties if they exist in frontmatter
								if (frontmatterData.title) {
									contentItem.data.title =
										frontmatterData.title;
								}
								if (frontmatterData.description) {
									contentItem.data.description =
										frontmatterData.description;
								}
								if (frontmatterData.qualities) {
									contentItem.data.qualities =
										frontmatterData.qualities;
								}
							} catch (frontmatterError) {
								console.error(
									`Error parsing frontmatter:`,
									frontmatterError
								);
							}

							let bodyStart = frontmatterEnd + 5; // Skip '\n---\n'

							// Skip any additional newlines
							while (
								bodyStart < rawContent.length &&
								rawContent[bodyStart] === "\n"
							) {
								bodyStart++;
							}

							const extractedBody = rawContent.slice(bodyStart);

							contentItem.body = extractedBody;
						}
					}
				}
			} else {
				contentItem = await getEntry("all", id);
			}
		} catch (error) {
			console.error(`Error in file reading:`, error);
			// Fallback to standard getEntry on any error
			contentItem = await getEntry("all", id);
		}
	} else {
		contentItem = await getEntry("all", id);
	}

	if (!contentItem) {
		console.warn("English content not found");
		console.groupEnd();
		return Astro.redirect(`/search?q=${id}`);
	}

	// Always parse content through contentParser
	let paliContent = { body: "" };
	if (showPali) {
		const paliEntry = await getEntry("pliAll", id);
		if (paliEntry) {
			paliContent = paliEntry;
		}
	}

	// Parse and combine content
	const pairs = await parseContent(
		paliContent,
		contentItem,
		!paragraphRequest && !discourseRange ? sectionNumber : undefined,
		fullRef,
		paragraphRequest,
		discourseRange
	);

	const content = createCombinedMarkdown(
		pairs,
		showPali,
		layout,
		paragraphRequest
	);

	// Prepare content based on layout type
	if (typeof content === "string") {
		mainContent = content;
	} else {
		mainContent = content.english;
		sideContent = content.pali;
	}

	// Extract last two segments of file path and remove extension
	const fpParts = (contentItem.filePath ?? "").split("/");
	let folder = fpParts[fpParts.length - 2] || "";
	const fp = folder ? `${folder}/${id}` : id;

	// Find next and previous items
	const nextIndex = currentIndex + 1;
	const prevIndex = currentIndex - 1;
	const next =
		nextIndex < routes.length
			? await getEntry("all", routes[nextIndex])
			: null;
	const prev =
		prevIndex >= 0 ? await getEntry("all", routes[prevIndex]) : null;

	// Get the file's last modified time
	const filePath = contentItem.filePath || "";
	const lastUpdated = getLastModified(filePath);

	suttaProps = {
		fp,
		title: contentItem.data.title,
		description: contentItem.data.description,
		qualities: contentItem.data.qualities
			?.split(",")
			.map((tag: string) => tag.trim()),
		prev,
		next,
		id,
		showReadLater: true,
		showSave: true,
		showRead: true,
		lastUpdated,
		showAuth: true,
		showPali: true,
		paragraphRequest,
	};
}
---

{
	route.type === "collection" ? (
		<CollectionLayout
			title={route.metadata?.title || ""}
			description={route.metadata?.description || ""}
			collection
			children={route.metadata?.children || {}}
			searchPattern={route.pattern || ""}
		/>
	) : (
		<Layout {...suttaProps}>
			<MDContent
				content={mainContent}
				sideContent={sideContent}
				layout={layout}
			/>
		</Layout>
	)
}
